
342project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004264  08004264  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004264  08004264  00014264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800426c  0800426c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000005c  080042d0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000073c  080042d0  0002073c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2b8  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dc1  00000000  00000000  0002c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a5  00000000  00000000  0002eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021a2f  00000000  00000000  0002f2ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb39  00000000  00000000  00050d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cabd1  00000000  00000000  0005d855  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002e44  00000000  00000000  00128428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0012b26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041d0 	.word	0x080041d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080041d0 	.word	0x080041d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b8      	sub	sp, #224	; 0xe0
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fc41 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f89d 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f98b 	bl	80008e4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 f95b 	bl	8000888 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f903 	bl	80007dc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005d6:	f000 f92b 	bl	8000830 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  char message[100];
  sprintf(message, "Printing test");
 80005da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005de:	4942      	ldr	r1, [pc, #264]	; (80006e8 <main+0x12c>)
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 f951 	bl	8003888 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fe10 	bl	8000210 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fc:	483b      	ldr	r0, [pc, #236]	; (80006ec <main+0x130>)
 80005fe:	f002 fa8e 	bl	8002b1e <HAL_UART_Transmit>

  int ir = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  int pir = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE BEGIN WHILE */
	  uint8_t pirVal = HAL_GPIO_ReadPin(GPIOA, PIR_SENSOR_PIN);
 800060e:	2108      	movs	r1, #8
 8000610:	4837      	ldr	r0, [pc, #220]	; (80006f0 <main+0x134>)
 8000612:	f000 ff29 	bl	8001468 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7


	  if (HAL_GPIO_ReadPin(GPIOA, PIR_SENSOR_PIN)) {
 800061c:	2108      	movs	r1, #8
 800061e:	4834      	ldr	r0, [pc, #208]	; (80006f0 <main+0x134>)
 8000620:	f000 ff22 	bl	8001468 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d00b      	beq.n	8000642 <main+0x86>
		  pir = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	4830      	ldr	r0, [pc, #192]	; (80006f4 <main+0x138>)
 8000634:	f000 ff49 	bl	80014ca <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000638:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063c:	f000 fc76 	bl	8000f2c <HAL_Delay>
 8000640:	e002      	b.n	8000648 <main+0x8c>
	  } else {
		  pir = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  }

	  // Read IR sensor value
	  uint8_t irVal = HAL_GPIO_ReadPin(GPIOB, IR_SENSOR_PIN);
 8000648:	2102      	movs	r1, #2
 800064a:	482a      	ldr	r0, [pc, #168]	; (80006f4 <main+0x138>)
 800064c:	f000 ff0c 	bl	8001468 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	  if (HAL_GPIO_ReadPin(GPIOB, IR_SENSOR_PIN)) {
 8000656:	2102      	movs	r1, #2
 8000658:	4826      	ldr	r0, [pc, #152]	; (80006f4 <main+0x138>)
 800065a:	f000 ff05 	bl	8001468 <HAL_GPIO_ReadPin>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d010      	beq.n	8000686 <main+0xca>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000664:	2101      	movs	r1, #1
 8000666:	4823      	ldr	r0, [pc, #140]	; (80006f4 <main+0x138>)
 8000668:	f000 ff2f 	bl	80014ca <HAL_GPIO_TogglePin>
		  ir = !ir;
 800066c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000670:	2b00      	cmp	r3, #0
 8000672:	bf0c      	ite	eq
 8000674:	2301      	moveq	r3, #1
 8000676:	2300      	movne	r3, #0
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		  HAL_Delay(500);
 800067e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000682:	f000 fc53 	bl	8000f2c <HAL_Delay>
	  }

	  char msg[100];
	  sprintf(msg, "PIR: %d, IR: %d\n\r", pirVal, irVal);
 8000686:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 800068a:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 800068e:	4638      	mov	r0, r7
 8000690:	4919      	ldr	r1, [pc, #100]	; (80006f8 <main+0x13c>)
 8000692:	f003 f8f9 	bl	8003888 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000696:	463b      	mov	r3, r7
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fdb9 	bl	8000210 <strlen>
 800069e:	4603      	mov	r3, r0
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4639      	mov	r1, r7
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <main+0x130>)
 80006aa:	f002 fa38 	bl	8002b1e <HAL_UART_Transmit>

	  // Concatenate sensor values into a single string
	  char data[10];
	  sprintf(data, "p%d i%d\n\r", pir, ir);
 80006ae:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80006b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80006b6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80006ba:	4910      	ldr	r1, [pc, #64]	; (80006fc <main+0x140>)
 80006bc:	f003 f8e4 	bl	8003888 <siprintf>

	  // Send data over Bluetooth
	  HAL_UART_Transmit(&huart6, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 80006c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fda3 	bl	8000210 <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <main+0x144>)
 80006d8:	f002 fa21 	bl	8002b1e <HAL_UART_Transmit>

	  // Delay before next iteration
	  HAL_Delay(1000); // Adjust as needed
 80006dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e0:	f000 fc24 	bl	8000f2c <HAL_Delay>
  {
 80006e4:	e793      	b.n	800060e <main+0x52>
 80006e6:	bf00      	nop
 80006e8:	080041e8 	.word	0x080041e8
 80006ec:	20000078 	.word	0x20000078
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	080041f8 	.word	0x080041f8
 80006fc:	0800420c 	.word	0x0800420c
 8000700:	200000c0 	.word	0x200000c0

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f003 f8d8 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <SystemClock_Config+0xd0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a22      	ldr	r2, [pc, #136]	; (80007d8 <SystemClock_Config+0xd4>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000764:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000768:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076a:	2302      	movs	r3, #2
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000778:	23a8      	movs	r3, #168	; 0xa8
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000780:	2307      	movs	r3, #7
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f001 fe65 	bl	800245c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 f97e 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2105      	movs	r1, #5
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 ffda 	bl	8001774 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c6:	f000 f967 	bl	8000a98 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART2_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x4c>)
 8000814:	f002 f8c0 	bl	8002998 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 f93b 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000078 	.word	0x20000078
 800082c:	40004400 	.word	0x40004400

08000830 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_USART6_UART_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_USART6_UART_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART6_UART_Init+0x50>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART6_UART_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_USART6_UART_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART6_UART_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_USART6_UART_Init+0x50>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART6_UART_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_USART6_UART_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart6, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART6_UART_Init+0x50>)
 800086c:	f002 f8e4 	bl	8002a38 <HAL_MultiProcessor_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000876:	f000 f90f 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000c0 	.word	0x200000c0
 8000884:	40011400 	.word	0x40011400

08000888 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000892:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2206      	movs	r2, #6
 8000898:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2202      	movs	r2, #2
 800089e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	f000 fe17 	bl	80014fe <HAL_PCD_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008d6:	f000 f8df 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000108 	.word	0x20000108

080008e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b60      	ldr	r3, [pc, #384]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a5f      	ldr	r2, [pc, #380]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b5d      	ldr	r3, [pc, #372]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a58      	ldr	r2, [pc, #352]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b56      	ldr	r3, [pc, #344]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a4a      	ldr	r2, [pc, #296]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b48      	ldr	r3, [pc, #288]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b44      	ldr	r3, [pc, #272]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a43      	ldr	r2, [pc, #268]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x19c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_GPIO_Init+0x19c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a8:	4836      	ldr	r0, [pc, #216]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 80009aa:	f000 fd75 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	4835      	ldr	r0, [pc, #212]	; (8000a88 <MX_GPIO_Init+0x1a4>)
 80009b4:	f000 fd70 	bl	8001498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	482f      	ldr	r0, [pc, #188]	; (8000a8c <MX_GPIO_Init+0x1a8>)
 80009d0:	f000 fbb6 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009d4:	2308      	movs	r3, #8
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	482a      	ldr	r0, [pc, #168]	; (8000a90 <MX_GPIO_Init+0x1ac>)
 80009e8:	f000 fbaa 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ec:	f244 0381 	movw	r3, #16513	; 0x4081
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f2:	2301      	movs	r3, #1
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	481f      	ldr	r0, [pc, #124]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a06:	f000 fb9b 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4819      	ldr	r0, [pc, #100]	; (8000a84 <MX_GPIO_Init+0x1a0>)
 8000a1e:	f000 fb8f 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a34:	2307      	movs	r3, #7
 8000a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4815      	ldr	r0, [pc, #84]	; (8000a94 <MX_GPIO_Init+0x1b0>)
 8000a40:	f000 fb7e 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <MX_GPIO_Init+0x1a4>)
 8000a5c:	f000 fb70 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x1a4>)
 8000a74:	f000 fb64 	bl	8001140 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	; 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400
 8000a88:	40021800 	.word	0x40021800
 8000a8c:	40020800 	.word	0x40020800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40020c00 	.word	0x40020c00

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a41      	ldr	r2, [pc, #260]	; (8000c18 <HAL_UART_MspInit+0x124>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d14a      	bne.n	8000bac <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b40      	ldr	r3, [pc, #256]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a3f      	ldr	r2, [pc, #252]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b3d      	ldr	r3, [pc, #244]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b39      	ldr	r3, [pc, #228]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a38      	ldr	r2, [pc, #224]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a31      	ldr	r2, [pc, #196]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b2f      	ldr	r3, [pc, #188]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	4826      	ldr	r0, [pc, #152]	; (8000c20 <HAL_UART_MspInit+0x12c>)
 8000b86:	f000 fadb 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b8a:	2340      	movs	r3, #64	; 0x40
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9a:	2307      	movs	r3, #7
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481f      	ldr	r0, [pc, #124]	; (8000c24 <HAL_UART_MspInit+0x130>)
 8000ba6:	f000 facb 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000baa:	e031      	b.n	8000c10 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART6)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a1d      	ldr	r2, [pc, #116]	; (8000c28 <HAL_UART_MspInit+0x134>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12c      	bne.n	8000c10 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a17      	ldr	r2, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_MspInit+0x128>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000bee:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c00:	2308      	movs	r3, #8
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4808      	ldr	r0, [pc, #32]	; (8000c2c <HAL_UART_MspInit+0x138>)
 8000c0c:	f000 fa98 	bl	8001140 <HAL_GPIO_Init>
}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	; 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020c00 	.word	0x40020c00
 8000c28:	40011400 	.word	0x40011400
 8000c2c:	40021800 	.word	0x40021800

08000c30 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b0a0      	sub	sp, #128	; 0x80
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	225c      	movs	r2, #92	; 0x5c
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fe39 	bl	80038c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5e:	d14e      	bne.n	8000cfe <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c66:	2300      	movs	r3, #0
 8000c68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 fe9a 	bl	80019a8 <HAL_RCCEx_PeriphCLKConfig>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c7a:	f7ff ff0d 	bl	8000a98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c9a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cac:	230a      	movs	r3, #10
 8000cae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4815      	ldr	r0, [pc, #84]	; (8000d0c <HAL_PCD_MspInit+0xdc>)
 8000cb8:	f000 fa42 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480e      	ldr	r0, [pc, #56]	; (8000d0c <HAL_PCD_MspInit+0xdc>)
 8000cd2:	f000 fa35 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce0:	6353      	str	r3, [r2, #52]	; 0x34
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_PCD_MspInit+0xd8>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3780      	adds	r7, #128	; 0x80
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	e7fe      	b.n	8000d14 <NMI_Handler+0x4>

08000d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <MemManage_Handler+0x4>

08000d22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8c6 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f002 fda0 	bl	80038d8 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20020000 	.word	0x20020000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	200005ec 	.word	0x200005ec
 8000dcc:	20000740 	.word	0x20000740

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000df8:	f7ff ffea 	bl	8000dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f002 fd5f 	bl	80038e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fbc9 	bl	80005bc <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e38:	08004274 	.word	0x08004274
  ldr r2, =_sbss
 8000e3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e40:	2000073c 	.word	0x2000073c

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f931 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff fe12 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f93b 	bl	8001126 <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 f911 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200005f0 	.word	0x200005f0

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200005f0 	.word	0x200005f0

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff47 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff5c 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffb0 	bl	8001094 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e165      	b.n	8001428 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8154 	bne.w	8001422 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80ae 	beq.w	8001422 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a5c      	ldr	r2, [pc, #368]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <HAL_GPIO_Init+0x300>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012e2:	4a58      	ldr	r2, [pc, #352]	; (8001444 <HAL_GPIO_Init+0x304>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x308>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d025      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_Init+0x30c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d01f      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x310>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d019      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d013      	beq.n	800134e <HAL_GPIO_Init+0x20e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4b      	ldr	r2, [pc, #300]	; (8001458 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d00d      	beq.n	800134a <HAL_GPIO_Init+0x20a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d007      	beq.n	8001346 <HAL_GPIO_Init+0x206>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a49      	ldr	r2, [pc, #292]	; (8001460 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d101      	bne.n	8001342 <HAL_GPIO_Init+0x202>
 800133e:	2306      	movs	r3, #6
 8001340:	e00c      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001342:	2307      	movs	r3, #7
 8001344:	e00a      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001346:	2305      	movs	r3, #5
 8001348:	e008      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134a:	2304      	movs	r3, #4
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800134e:	2303      	movs	r3, #3
 8001350:	e004      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001352:	2302      	movs	r3, #2
 8001354:	e002      	b.n	800135c <HAL_GPIO_Init+0x21c>
 8001356:	2301      	movs	r3, #1
 8001358:	e000      	b.n	800135c <HAL_GPIO_Init+0x21c>
 800135a:	2300      	movs	r3, #0
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	f002 0203 	and.w	r2, r2, #3
 8001362:	0092      	lsls	r2, r2, #2
 8001364:	4093      	lsls	r3, r2
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136c:	4935      	ldr	r1, [pc, #212]	; (8001444 <HAL_GPIO_Init+0x304>)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	089b      	lsrs	r3, r3, #2
 8001372:	3302      	adds	r3, #2
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <HAL_GPIO_Init+0x324>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800139e:	4a31      	ldr	r2, [pc, #196]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a4:	4b2f      	ldr	r3, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4013      	ands	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f8:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x324>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_GPIO_Init+0x324>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3301      	adds	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	2b0f      	cmp	r3, #15
 800142c:	f67f ae96 	bls.w	800115c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800
 8001444:	40013800 	.word	0x40013800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020400 	.word	0x40020400
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00
 8001458:	40021000 	.word	0x40021000
 800145c:	40021400 	.word	0x40021400
 8001460:	40021800 	.word	0x40021800
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
 8001484:	e001      	b.n	800148a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	807b      	strh	r3, [r7, #2]
 80014a4:	4613      	mov	r3, r2
 80014a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a8:	787b      	ldrb	r3, [r7, #1]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b4:	e003      	b.n	80014be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014dc:	887a      	ldrh	r2, [r7, #2]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	041a      	lsls	r2, r3, #16
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43d9      	mvns	r1, r3
 80014e8:	887b      	ldrh	r3, [r7, #2]
 80014ea:	400b      	ands	r3, r1
 80014ec:	431a      	orrs	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af02      	add	r7, sp, #8
 8001504:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e108      	b.n	8001722 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fb80 	bl	8000c30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153e:	d102      	bne.n	8001546 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 ff06 	bl	800335c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7c1a      	ldrb	r2, [r3, #16]
 8001558:	f88d 2000 	strb.w	r2, [sp]
 800155c:	3304      	adds	r3, #4
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	f001 fe98 	bl	8003294 <USB_CoreInit>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2202      	movs	r2, #2
 800156e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0d5      	b.n	8001722 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fefe 	bl	800337e <USB_SetCurrentMode>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2202      	movs	r2, #2
 800158c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0c6      	b.n	8001722 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e04a      	b.n	8001630 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3315      	adds	r3, #21
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	3314      	adds	r3, #20
 80015be:	7bfa      	ldrb	r2, [r7, #15]
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	b298      	uxth	r0, r3
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	332e      	adds	r3, #46	; 0x2e
 80015d6:	4602      	mov	r2, r0
 80015d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3318      	adds	r3, #24
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	331c      	adds	r3, #28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3320      	adds	r3, #32
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3324      	adds	r3, #36	; 0x24
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	3301      	adds	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3af      	bcc.n	800159a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163a:	2300      	movs	r3, #0
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e044      	b.n	80016ca <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4413      	add	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001656:	7bfa      	ldrb	r2, [r7, #15]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4413      	add	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001698:	7bfa      	ldrb	r2, [r7, #15]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016ae:	7bfa      	ldrb	r2, [r7, #15]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	3301      	adds	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	791b      	ldrb	r3, [r3, #4]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d3b5      	bcc.n	8001640 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7c1a      	ldrb	r2, [r3, #16]
 80016dc:	f88d 2000 	strb.w	r2, [sp]
 80016e0:	3304      	adds	r3, #4
 80016e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016e4:	f001 fe98 	bl	8003418 <USB_DevInit>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e013      	b.n	8001722 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7b1b      	ldrb	r3, [r3, #12]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d102      	bne.n	8001716 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f80a 	bl	800172a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f002 f853 	bl	80037c6 <USB_DevDisconnect>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	f043 0303 	orr.w	r3, r3, #3
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0cc      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d90c      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b65      	ldr	r3, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d044      	beq.n	8001894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d003      	beq.n	8001832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182e:	2b03      	cmp	r3, #3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d109      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e067      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f023 0203 	bic.w	r2, r3, #3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4934      	ldr	r1, [pc, #208]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001864:	f7ff fb56 	bl	8000f14 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	e00a      	b.n	8001882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186c:	f7ff fb52 	bl	8000f14 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e04f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 020c 	and.w	r2, r3, #12
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	429a      	cmp	r2, r3
 8001892:	d1eb      	bne.n	800186c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001894:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 030f 	and.w	r3, r3, #15
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d20c      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 fb7f 	bl	8001ffc <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fab6 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00
 8001930:	40023800 	.word	0x40023800
 8001934:	08004218 	.word	0x08004218
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_GetHCLKFreq+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff0 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a9b      	lsrs	r3, r3, #10
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	08004228 	.word	0x08004228

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffdc 	bl	8001940 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	0b5b      	lsrs	r3, r3, #13
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08004228 	.word	0x08004228

080019a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d010      	beq.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019e0:	4b6f      	ldr	r3, [pc, #444]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019e6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	496c      	ldr	r1, [pc, #432]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001a0e:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a14:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	4960      	ldr	r1, [pc, #384]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d101      	bne.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a3c:	4b58      	ldr	r3, [pc, #352]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4955      	ldr	r1, [pc, #340]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a78:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a86:	4946      	ldr	r1, [pc, #280]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a96:	d101      	bne.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 808a 	beq.w	8001bca <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	4b39      	ldr	r3, [pc, #228]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac6:	4b36      	ldr	r3, [pc, #216]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a33      	ldr	r2, [pc, #204]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ade:	f7ff fa19 	bl	8000f14 <HAL_GetTick>
 8001ae2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fa15 	bl	8000f14 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e278      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001af8:	4b2a      	ldr	r3, [pc, #168]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b04:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b0e:	6a3b      	ldr	r3, [r7, #32]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d02f      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d028      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b22:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b2a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b3e:	4b18      	ldr	r3, [pc, #96]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d114      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f9e3 	bl	8000f14 <HAL_GetTick>
 8001b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f9df 	bl	8000f14 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e240      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b80:	d114      	bne.n	8001bac <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b96:	4902      	ldr	r1, [pc, #8]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]
 8001b9c:	e00c      	b.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000
 8001ba8:	42470e40 	.word	0x42470e40
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bb6:	6093      	str	r3, [r2, #8]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	4944      	ldr	r1, [pc, #272]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001bdc:	4b3f      	ldr	r3, [pc, #252]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bde:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	4937      	ldr	r1, [pc, #220]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00a      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	492e      	ldr	r1, [pc, #184]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d011      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c36:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	4926      	ldr	r1, [pc, #152]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c4e:	d101      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c50:	2301      	movs	r3, #1
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00a      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	491a      	ldr	r1, [pc, #104]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d011      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c88:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c90:	4911      	ldr	r1, [pc, #68]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cb4:	f040 80ff 	bne.w	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cbe:	f7ff f929 	bl	8000f14 <HAL_GetTick>
 8001cc2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cc4:	e00e      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cc6:	f7ff f925 	bl	8000f14 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d907      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e188      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	424711e0 	.word	0x424711e0
 8001ce0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ce4:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ea      	bne.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d028      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d124      	bne.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d18:	4b71      	ldr	r3, [pc, #452]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d1e:	0c1b      	lsrs	r3, r3, #16
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	3301      	adds	r3, #1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d30:	0e1b      	lsrs	r3, r3, #24
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	019b      	lsls	r3, r3, #6
 8001d42:	431a      	orrs	r2, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	071b      	lsls	r3, r3, #28
 8001d5a:	4961      	ldr	r1, [pc, #388]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d035      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8c:	d130      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d8e:	4b54      	ldr	r3, [pc, #336]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001da0:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001da6:	0f1b      	lsrs	r3, r3, #28
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	019b      	lsls	r3, r3, #6
 8001db8:	431a      	orrs	r2, r3
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	041b      	lsls	r3, r3, #16
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	061b      	lsls	r3, r3, #24
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	071b      	lsls	r3, r3, #28
 8001dd0:	4943      	ldr	r1, [pc, #268]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dde:	f023 021f 	bic.w	r2, r3, #31
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	3b01      	subs	r3, #1
 8001de8:	493d      	ldr	r1, [pc, #244]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d029      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e04:	d124      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	3301      	adds	r3, #1
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1e:	0f1b      	lsrs	r3, r3, #28
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	019b      	lsls	r3, r3, #6
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	041b      	lsls	r3, r3, #16
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	431a      	orrs	r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	071b      	lsls	r3, r3, #28
 8001e48:	4925      	ldr	r1, [pc, #148]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d016      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	019b      	lsls	r3, r3, #6
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	041b      	lsls	r3, r3, #16
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	071b      	lsls	r3, r3, #28
 8001e82:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff f840 	bl	8000f14 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e98:	f7ff f83c 	bl	8000f14 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e09f      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 8095 	bne.w	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff f826 	bl	8000f14 <HAL_GetTick>
 8001ec8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eca:	e00f      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ecc:	f7ff f822 	bl	8000f14 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d908      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e085      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	42470068 	.word	0x42470068
 8001ee8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eec:	4b41      	ldr	r3, [pc, #260]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ef8:	d0e8      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d02b      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d127      	bne.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	3b01      	subs	r3, #1
 8001f46:	041b      	lsls	r3, r3, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	061b      	lsls	r3, r3, #24
 8001f50:	4928      	ldr	r1, [pc, #160]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f58:	4b26      	ldr	r3, [pc, #152]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f66:	3b01      	subs	r3, #1
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	4922      	ldr	r1, [pc, #136]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01d      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f86:	d118      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f88:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8e:	0e1b      	lsrs	r3, r3, #24
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	019b      	lsls	r3, r3, #6
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	085b      	lsrs	r3, r3, #1
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	4910      	ldr	r1, [pc, #64]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001fba:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe ffa8 	bl	8000f14 <HAL_GetTick>
 8001fc4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fc8:	f7fe ffa4 	bl	8000f14 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e007      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fe6:	d1ef      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3730      	adds	r7, #48	; 0x30
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	42470070 	.word	0x42470070

08001ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002000:	b0ae      	sub	sp, #184	; 0xb8
 8002002:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002022:	4bcb      	ldr	r3, [pc, #812]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b0c      	cmp	r3, #12
 800202c:	f200 8206 	bhi.w	800243c <HAL_RCC_GetSysClockFreq+0x440>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	0800206d 	.word	0x0800206d
 800203c:	0800243d 	.word	0x0800243d
 8002040:	0800243d 	.word	0x0800243d
 8002044:	0800243d 	.word	0x0800243d
 8002048:	08002075 	.word	0x08002075
 800204c:	0800243d 	.word	0x0800243d
 8002050:	0800243d 	.word	0x0800243d
 8002054:	0800243d 	.word	0x0800243d
 8002058:	0800207d 	.word	0x0800207d
 800205c:	0800243d 	.word	0x0800243d
 8002060:	0800243d 	.word	0x0800243d
 8002064:	0800243d 	.word	0x0800243d
 8002068:	0800226d 	.word	0x0800226d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4bb9      	ldr	r3, [pc, #740]	; (8002354 <HAL_RCC_GetSysClockFreq+0x358>)
 800206e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002072:	e1e7      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4bb8      	ldr	r3, [pc, #736]	; (8002358 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800207a:	e1e3      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800207c:	4bb4      	ldr	r3, [pc, #720]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002088:	4bb1      	ldr	r3, [pc, #708]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d071      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002094:	4bae      	ldr	r3, [pc, #696]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	2200      	movs	r2, #0
 800209c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80020a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80020a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80020b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020ba:	4622      	mov	r2, r4
 80020bc:	462b      	mov	r3, r5
 80020be:	f04f 0000 	mov.w	r0, #0
 80020c2:	f04f 0100 	mov.w	r1, #0
 80020c6:	0159      	lsls	r1, r3, #5
 80020c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020cc:	0150      	lsls	r0, r2, #5
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4621      	mov	r1, r4
 80020d4:	1a51      	subs	r1, r2, r1
 80020d6:	6439      	str	r1, [r7, #64]	; 0x40
 80020d8:	4629      	mov	r1, r5
 80020da:	eb63 0301 	sbc.w	r3, r3, r1
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80020ec:	4649      	mov	r1, r9
 80020ee:	018b      	lsls	r3, r1, #6
 80020f0:	4641      	mov	r1, r8
 80020f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020f6:	4641      	mov	r1, r8
 80020f8:	018a      	lsls	r2, r1, #6
 80020fa:	4641      	mov	r1, r8
 80020fc:	1a51      	subs	r1, r2, r1
 80020fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002100:	4649      	mov	r1, r9
 8002102:	eb63 0301 	sbc.w	r3, r3, r1
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002114:	4649      	mov	r1, r9
 8002116:	00cb      	lsls	r3, r1, #3
 8002118:	4641      	mov	r1, r8
 800211a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800211e:	4641      	mov	r1, r8
 8002120:	00ca      	lsls	r2, r1, #3
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	4603      	mov	r3, r0
 8002128:	4622      	mov	r2, r4
 800212a:	189b      	adds	r3, r3, r2
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
 800212e:	462b      	mov	r3, r5
 8002130:	460a      	mov	r2, r1
 8002132:	eb42 0303 	adc.w	r3, r2, r3
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	f04f 0300 	mov.w	r3, #0
 8002140:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002144:	4629      	mov	r1, r5
 8002146:	024b      	lsls	r3, r1, #9
 8002148:	4621      	mov	r1, r4
 800214a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800214e:	4621      	mov	r1, r4
 8002150:	024a      	lsls	r2, r1, #9
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800215a:	2200      	movs	r2, #0
 800215c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002160:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002164:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002168:	f7fe f8aa 	bl	80002c0 <__aeabi_uldivmod>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4613      	mov	r3, r2
 8002172:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002176:	e067      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002178:	4b75      	ldr	r3, [pc, #468]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	099b      	lsrs	r3, r3, #6
 800217e:	2200      	movs	r2, #0
 8002180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002184:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800218c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002190:	67bb      	str	r3, [r7, #120]	; 0x78
 8002192:	2300      	movs	r3, #0
 8002194:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002196:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800219a:	4622      	mov	r2, r4
 800219c:	462b      	mov	r3, r5
 800219e:	f04f 0000 	mov.w	r0, #0
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ac:	0150      	lsls	r0, r2, #5
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4621      	mov	r1, r4
 80021b4:	1a51      	subs	r1, r2, r1
 80021b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80021b8:	4629      	mov	r1, r5
 80021ba:	eb63 0301 	sbc.w	r3, r3, r1
 80021be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80021cc:	4649      	mov	r1, r9
 80021ce:	018b      	lsls	r3, r1, #6
 80021d0:	4641      	mov	r1, r8
 80021d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021d6:	4641      	mov	r1, r8
 80021d8:	018a      	lsls	r2, r1, #6
 80021da:	4641      	mov	r1, r8
 80021dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80021e0:	4649      	mov	r1, r9
 80021e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021fa:	4692      	mov	sl, r2
 80021fc:	469b      	mov	fp, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	eb1a 0303 	adds.w	r3, sl, r3
 8002204:	623b      	str	r3, [r7, #32]
 8002206:	462b      	mov	r3, r5
 8002208:	eb4b 0303 	adc.w	r3, fp, r3
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800221a:	4629      	mov	r1, r5
 800221c:	028b      	lsls	r3, r1, #10
 800221e:	4621      	mov	r1, r4
 8002220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002224:	4621      	mov	r1, r4
 8002226:	028a      	lsls	r2, r1, #10
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002230:	2200      	movs	r2, #0
 8002232:	673b      	str	r3, [r7, #112]	; 0x70
 8002234:	677a      	str	r2, [r7, #116]	; 0x74
 8002236:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800223a:	f7fe f841 	bl	80002c0 <__aeabi_uldivmod>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4613      	mov	r3, r2
 8002244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800225a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800225e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800226a:	e0eb      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800226c:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d06b      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCC_GetSysClockFreq+0x354>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	2200      	movs	r2, #0
 800228c:	66bb      	str	r3, [r7, #104]	; 0x68
 800228e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002296:	663b      	str	r3, [r7, #96]	; 0x60
 8002298:	2300      	movs	r3, #0
 800229a:	667b      	str	r3, [r7, #100]	; 0x64
 800229c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80022a0:	4622      	mov	r2, r4
 80022a2:	462b      	mov	r3, r5
 80022a4:	f04f 0000 	mov.w	r0, #0
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	0159      	lsls	r1, r3, #5
 80022ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b2:	0150      	lsls	r0, r2, #5
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4621      	mov	r1, r4
 80022ba:	1a51      	subs	r1, r2, r1
 80022bc:	61b9      	str	r1, [r7, #24]
 80022be:	4629      	mov	r1, r5
 80022c0:	eb63 0301 	sbc.w	r3, r3, r1
 80022c4:	61fb      	str	r3, [r7, #28]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022d2:	4659      	mov	r1, fp
 80022d4:	018b      	lsls	r3, r1, #6
 80022d6:	4651      	mov	r1, sl
 80022d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022dc:	4651      	mov	r1, sl
 80022de:	018a      	lsls	r2, r1, #6
 80022e0:	4651      	mov	r1, sl
 80022e2:	ebb2 0801 	subs.w	r8, r2, r1
 80022e6:	4659      	mov	r1, fp
 80022e8:	eb63 0901 	sbc.w	r9, r3, r1
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002300:	4690      	mov	r8, r2
 8002302:	4699      	mov	r9, r3
 8002304:	4623      	mov	r3, r4
 8002306:	eb18 0303 	adds.w	r3, r8, r3
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	462b      	mov	r3, r5
 800230e:	eb49 0303 	adc.w	r3, r9, r3
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002320:	4629      	mov	r1, r5
 8002322:	024b      	lsls	r3, r1, #9
 8002324:	4621      	mov	r1, r4
 8002326:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800232a:	4621      	mov	r1, r4
 800232c:	024a      	lsls	r2, r1, #9
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002336:	2200      	movs	r2, #0
 8002338:	65bb      	str	r3, [r7, #88]	; 0x58
 800233a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800233c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002340:	f7fd ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800234e:	e065      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x420>
 8002350:	40023800 	.word	0x40023800
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_GetSysClockFreq+0x458>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	4618      	mov	r0, r3
 8002366:	4611      	mov	r1, r2
 8002368:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800236c:	653b      	str	r3, [r7, #80]	; 0x50
 800236e:	2300      	movs	r3, #0
 8002370:	657b      	str	r3, [r7, #84]	; 0x54
 8002372:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002376:	4642      	mov	r2, r8
 8002378:	464b      	mov	r3, r9
 800237a:	f04f 0000 	mov.w	r0, #0
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002388:	0150      	lsls	r0, r2, #5
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4641      	mov	r1, r8
 8002390:	1a51      	subs	r1, r2, r1
 8002392:	60b9      	str	r1, [r7, #8]
 8002394:	4649      	mov	r1, r9
 8002396:	eb63 0301 	sbc.w	r3, r3, r1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023a8:	4659      	mov	r1, fp
 80023aa:	018b      	lsls	r3, r1, #6
 80023ac:	4651      	mov	r1, sl
 80023ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023b2:	4651      	mov	r1, sl
 80023b4:	018a      	lsls	r2, r1, #6
 80023b6:	4651      	mov	r1, sl
 80023b8:	1a54      	subs	r4, r2, r1
 80023ba:	4659      	mov	r1, fp
 80023bc:	eb63 0501 	sbc.w	r5, r3, r1
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	00eb      	lsls	r3, r5, #3
 80023ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ce:	00e2      	lsls	r2, r4, #3
 80023d0:	4614      	mov	r4, r2
 80023d2:	461d      	mov	r5, r3
 80023d4:	4643      	mov	r3, r8
 80023d6:	18e3      	adds	r3, r4, r3
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	464b      	mov	r3, r9
 80023dc:	eb45 0303 	adc.w	r3, r5, r3
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	f04f 0300 	mov.w	r3, #0
 80023ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ee:	4629      	mov	r1, r5
 80023f0:	028b      	lsls	r3, r1, #10
 80023f2:	4621      	mov	r1, r4
 80023f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f8:	4621      	mov	r1, r4
 80023fa:	028a      	lsls	r2, r1, #10
 80023fc:	4610      	mov	r0, r2
 80023fe:	4619      	mov	r1, r3
 8002400:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002404:	2200      	movs	r2, #0
 8002406:	64bb      	str	r3, [r7, #72]	; 0x48
 8002408:	64fa      	str	r2, [r7, #76]	; 0x4c
 800240a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800240e:	f7fd ff57 	bl	80002c0 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4613      	mov	r3, r2
 8002418:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCC_GetSysClockFreq+0x458>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	0f1b      	lsrs	r3, r3, #28
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800242a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800242e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002432:	fbb2 f3f3 	udiv	r3, r2, r3
 8002436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800243a:	e003      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetSysClockFreq+0x45c>)
 800243e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002442:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002448:	4618      	mov	r0, r3
 800244a:	37b8      	adds	r7, #184	; 0xb8
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	00f42400 	.word	0x00f42400

0800245c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e28d      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 8083 	beq.w	8002582 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800247c:	4b94      	ldr	r3, [pc, #592]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	2b04      	cmp	r3, #4
 8002486:	d019      	beq.n	80024bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002488:	4b91      	ldr	r3, [pc, #580]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002490:	2b08      	cmp	r3, #8
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002494:	4b8e      	ldr	r3, [pc, #568]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800249c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024a0:	d00c      	beq.n	80024bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d112      	bne.n	80024d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ba:	d10b      	bne.n	80024d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	4b84      	ldr	r3, [pc, #528]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05b      	beq.n	8002580 <HAL_RCC_OscConfig+0x124>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d157      	bne.n	8002580 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e25a      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024dc:	d106      	bne.n	80024ec <HAL_RCC_OscConfig+0x90>
 80024de:	4b7c      	ldr	r3, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a7b      	ldr	r2, [pc, #492]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	e01d      	b.n	8002528 <HAL_RCC_OscConfig+0xcc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f4:	d10c      	bne.n	8002510 <HAL_RCC_OscConfig+0xb4>
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a72      	ldr	r2, [pc, #456]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	e00b      	b.n	8002528 <HAL_RCC_OscConfig+0xcc>
 8002510:	4b6f      	ldr	r3, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a6e      	ldr	r2, [pc, #440]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b6c      	ldr	r3, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a6b      	ldr	r2, [pc, #428]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fcf0 	bl	8000f14 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe fcec 	bl	8000f14 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e21f      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0xdc>
 8002556:	e014      	b.n	8002582 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fcdc 	bl	8000f14 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fcd8 	bl	8000f14 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e20b      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002572:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x104>
 800257e:	e000      	b.n	8002582 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d06f      	beq.n	800266e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800258e:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b00      	cmp	r3, #0
 8002598:	d017      	beq.n	80025ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800259a:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025a2:	2b08      	cmp	r3, #8
 80025a4:	d105      	bne.n	80025b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x186>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1d3      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x278>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7fe fc85 	bl	8000f14 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7fe fc81 	bl	8000f14 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1b4      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x278>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7fe fc64 	bl	8000f14 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe fc60 	bl	8000f14 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e193      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d036      	beq.n	80026e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x27c>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe fc44 	bl	8000f14 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002690:	f7fe fc40 	bl	8000f14 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e173      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_OscConfig+0x274>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x234>
 80026ae:	e01b      	b.n	80026e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_OscConfig+0x27c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b6:	f7fe fc2d 	bl	8000f14 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00e      	b.n	80026dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe fc29 	bl	8000f14 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d907      	bls.n	80026dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e15c      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000
 80026d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b8a      	ldr	r3, [pc, #552]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8097 	beq.w	8002824 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b83      	ldr	r3, [pc, #524]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b7f      	ldr	r3, [pc, #508]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a7e      	ldr	r2, [pc, #504]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b79      	ldr	r3, [pc, #484]	; (800290c <HAL_RCC_OscConfig+0x4b0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCC_OscConfig+0x4b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCC_OscConfig+0x4b0>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe fbe9 	bl	8000f14 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe fbe5 	bl	8000f14 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e118      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b6c      	ldr	r3, [pc, #432]	; (800290c <HAL_RCC_OscConfig+0x4b0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x31e>
 800276c:	4b66      	ldr	r3, [pc, #408]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a65      	ldr	r2, [pc, #404]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x358>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x340>
 8002782:	4b61      	ldr	r3, [pc, #388]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a60      	ldr	r2, [pc, #384]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	4b5e      	ldr	r3, [pc, #376]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5d      	ldr	r2, [pc, #372]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0x358>
 800279c:	4b5a      	ldr	r3, [pc, #360]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a59      	ldr	r2, [pc, #356]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	4b57      	ldr	r3, [pc, #348]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a56      	ldr	r2, [pc, #344]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fbaa 	bl	8000f14 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fba6 	bl	8000f14 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0d7      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b4b      	ldr	r3, [pc, #300]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCC_OscConfig+0x368>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe fb94 	bl	8000f14 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe fb90 	bl	8000f14 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0c1      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	4b40      	ldr	r3, [pc, #256]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a3a      	ldr	r2, [pc, #232]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80ad 	beq.w	8002988 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d060      	beq.n	80028fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d145      	bne.n	80028ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x4b4>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7fe fb64 	bl	8000f14 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fb60 	bl	8000f14 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e093      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	071b      	lsls	r3, r3, #28
 800289a:	491b      	ldr	r1, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 800289c:	4313      	orrs	r3, r2
 800289e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <HAL_RCC_OscConfig+0x4b4>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fb35 	bl	8000f14 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fe fb31 	bl	8000f14 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e064      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x452>
 80028cc:	e05c      	b.n	8002988 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x4b4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fb1e 	bl	8000f14 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028dc:	f7fe fb1a 	bl	8000f14 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04d      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ee:	4b06      	ldr	r3, [pc, #24]	; (8002908 <HAL_RCC_OscConfig+0x4ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x480>
 80028fa:	e045      	b.n	8002988 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e040      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_RCC_OscConfig+0x538>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d030      	beq.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d129      	bne.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d122      	bne.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800294a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d119      	bne.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	3b01      	subs	r3, #1
 800295e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d10f      	bne.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023800 	.word	0x40023800

08002998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e042      	b.n	8002a30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f898 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f9e5 	bl	8002dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	460b      	mov	r3, r1
 8002a42:	607a      	str	r2, [r7, #4]
 8002a44:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e062      	b.n	8002b16 <HAL_MultiProcessor_Init+0xde>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f7fe f845 	bl	8000af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2224      	movs	r2, #36	; 0x24
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f992 	bl	8002dac <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691a      	ldr	r2, [r3, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa6:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 020f 	bic.w	r2, r2, #15
 8002ab6:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6919      	ldr	r1, [r3, #16]
 8002abe:	7afa      	ldrb	r2, [r7, #11]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ad6:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68d9      	ldr	r1, [r3, #12]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002af6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b08a      	sub	sp, #40	; 0x28
 8002b22:	af02      	add	r7, sp, #8
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d175      	bne.n	8002c2a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <HAL_UART_Transmit+0x2c>
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06e      	b.n	8002c2c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2221      	movs	r2, #33	; 0x21
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe f9da 	bl	8000f14 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	88fa      	ldrh	r2, [r7, #6]
 8002b66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d108      	bne.n	8002b8a <HAL_UART_Transmit+0x6c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d104      	bne.n	8002b8a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	e003      	b.n	8002b92 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b92:	e02e      	b.n	8002bf2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2180      	movs	r1, #128	; 0x80
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f848 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e03a      	b.n	8002c2c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bca:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3302      	adds	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	e007      	b.n	8002be4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	781a      	ldrb	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1cb      	bne.n	8002b94 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2200      	movs	r2, #0
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f814 	bl	8002c34 <UART_WaitOnFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e006      	b.n	8002c2c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e000      	b.n	8002c2c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c2a:	2302      	movs	r3, #2
  }
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c44:	e03b      	b.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c4c:	d037      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c4e:	f7fe f961 	bl	8000f14 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d302      	bcc.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e03a      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d023      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d020      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d01d      	beq.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d116      	bne.n	8002cbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f81d 	bl	8002ce6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2208      	movs	r2, #8
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	bf0c      	ite	eq
 8002cce:	2301      	moveq	r3, #1
 8002cd0:	2300      	movne	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d0b4      	beq.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b095      	sub	sp, #84	; 0x54
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d0e:	643a      	str	r2, [r7, #64]	; 0x40
 8002d10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e5      	bne.n	8002cee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e5      	bne.n	8002d22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d119      	bne.n	8002d92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f023 0310 	bic.w	r3, r3, #16
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	330c      	adds	r3, #12
 8002d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d7e:	61ba      	str	r2, [r7, #24]
 8002d80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d82:	6979      	ldr	r1, [r7, #20]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	e841 2300 	strex	r3, r2, [r1]
 8002d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1e5      	bne.n	8002d5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002da0:	bf00      	nop
 8002da2:	3754      	adds	r7, #84	; 0x54
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db0:	b0c0      	sub	sp, #256	; 0x100
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc8:	68d9      	ldr	r1, [r3, #12]
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	ea40 0301 	orr.w	r3, r0, r1
 8002dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e04:	f021 010c 	bic.w	r1, r1, #12
 8002e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e12:	430b      	orrs	r3, r1
 8002e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e26:	6999      	ldr	r1, [r3, #24]
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	ea40 0301 	orr.w	r3, r0, r1
 8002e32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b8f      	ldr	r3, [pc, #572]	; (8003078 <UART_SetConfig+0x2cc>)
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d005      	beq.n	8002e4c <UART_SetConfig+0xa0>
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b8d      	ldr	r3, [pc, #564]	; (800307c <UART_SetConfig+0x2d0>)
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d104      	bne.n	8002e56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e4c:	f7fe fd98 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8002e50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e54:	e003      	b.n	8002e5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e56:	f7fe fd7f 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 8002e5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	f040 810c 	bne.w	8003084 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e70:	2200      	movs	r2, #0
 8002e72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e7e:	4622      	mov	r2, r4
 8002e80:	462b      	mov	r3, r5
 8002e82:	1891      	adds	r1, r2, r2
 8002e84:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e86:	415b      	adcs	r3, r3
 8002e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e8e:	4621      	mov	r1, r4
 8002e90:	eb12 0801 	adds.w	r8, r2, r1
 8002e94:	4629      	mov	r1, r5
 8002e96:	eb43 0901 	adc.w	r9, r3, r1
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	f04f 0300 	mov.w	r3, #0
 8002ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eae:	4690      	mov	r8, r2
 8002eb0:	4699      	mov	r9, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	eb18 0303 	adds.w	r3, r8, r3
 8002eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	eb49 0303 	adc.w	r3, r9, r3
 8002ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ed2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ed6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eda:	460b      	mov	r3, r1
 8002edc:	18db      	adds	r3, r3, r3
 8002ede:	653b      	str	r3, [r7, #80]	; 0x50
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	eb42 0303 	adc.w	r3, r2, r3
 8002ee6:	657b      	str	r3, [r7, #84]	; 0x54
 8002ee8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002eec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ef0:	f7fd f9e6 	bl	80002c0 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b61      	ldr	r3, [pc, #388]	; (8003080 <UART_SetConfig+0x2d4>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	011c      	lsls	r4, r3, #4
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f24:	4641      	mov	r1, r8
 8002f26:	eb12 0a01 	adds.w	sl, r2, r1
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	eb43 0b01 	adc.w	fp, r3, r1
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f44:	4692      	mov	sl, r2
 8002f46:	469b      	mov	fp, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f52:	464b      	mov	r3, r9
 8002f54:	eb4b 0303 	adc.w	r3, fp, r3
 8002f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f70:	460b      	mov	r3, r1
 8002f72:	18db      	adds	r3, r3, r3
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
 8002f76:	4613      	mov	r3, r2
 8002f78:	eb42 0303 	adc.w	r3, r2, r3
 8002f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f86:	f7fd f99b 	bl	80002c0 <__aeabi_uldivmod>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4611      	mov	r1, r2
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <UART_SetConfig+0x2d4>)
 8002f92:	fba3 2301 	umull	r2, r3, r3, r1
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	2264      	movs	r2, #100	; 0x64
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	1acb      	subs	r3, r1, r3
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <UART_SetConfig+0x2d4>)
 8002fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8002fac:	095b      	lsrs	r3, r3, #5
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fb4:	441c      	add	r4, r3
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002fc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800300c:	464b      	mov	r3, r9
 800300e:	460a      	mov	r2, r1
 8003010:	eb42 0303 	adc.w	r3, r2, r3
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003024:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800302c:	460b      	mov	r3, r1
 800302e:	18db      	adds	r3, r3, r3
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28
 8003032:	4613      	mov	r3, r2
 8003034:	eb42 0303 	adc.w	r3, r2, r3
 8003038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800303e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003042:	f7fd f93d 	bl	80002c0 <__aeabi_uldivmod>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <UART_SetConfig+0x2d4>)
 800304c:	fba3 1302 	umull	r1, r3, r3, r2
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	2164      	movs	r1, #100	; 0x64
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	3332      	adds	r3, #50	; 0x32
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <UART_SetConfig+0x2d4>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	095b      	lsrs	r3, r3, #5
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4422      	add	r2, r4
 8003072:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003074:	e106      	b.n	8003284 <UART_SetConfig+0x4d8>
 8003076:	bf00      	nop
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003088:	2200      	movs	r2, #0
 800308a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800308e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003092:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	1891      	adds	r1, r2, r2
 800309c:	6239      	str	r1, [r7, #32]
 800309e:	415b      	adcs	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030a6:	4641      	mov	r1, r8
 80030a8:	1854      	adds	r4, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb43 0501 	adc.w	r5, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	00eb      	lsls	r3, r5, #3
 80030ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030be:	00e2      	lsls	r2, r4, #3
 80030c0:	4614      	mov	r4, r2
 80030c2:	461d      	mov	r5, r3
 80030c4:	4643      	mov	r3, r8
 80030c6:	18e3      	adds	r3, r4, r3
 80030c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030cc:	464b      	mov	r3, r9
 80030ce:	eb45 0303 	adc.w	r3, r5, r3
 80030d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030f2:	4629      	mov	r1, r5
 80030f4:	008b      	lsls	r3, r1, #2
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030fc:	4621      	mov	r1, r4
 80030fe:	008a      	lsls	r2, r1, #2
 8003100:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003104:	f7fd f8dc 	bl	80002c0 <__aeabi_uldivmod>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4b60      	ldr	r3, [pc, #384]	; (8003290 <UART_SetConfig+0x4e4>)
 800310e:	fba3 2302 	umull	r2, r3, r3, r2
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	011c      	lsls	r4, r3, #4
 8003116:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003120:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003124:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003128:	4642      	mov	r2, r8
 800312a:	464b      	mov	r3, r9
 800312c:	1891      	adds	r1, r2, r2
 800312e:	61b9      	str	r1, [r7, #24]
 8003130:	415b      	adcs	r3, r3
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003138:	4641      	mov	r1, r8
 800313a:	1851      	adds	r1, r2, r1
 800313c:	6139      	str	r1, [r7, #16]
 800313e:	4649      	mov	r1, r9
 8003140:	414b      	adcs	r3, r1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003150:	4659      	mov	r1, fp
 8003152:	00cb      	lsls	r3, r1, #3
 8003154:	4651      	mov	r1, sl
 8003156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800315a:	4651      	mov	r1, sl
 800315c:	00ca      	lsls	r2, r1, #3
 800315e:	4610      	mov	r0, r2
 8003160:	4619      	mov	r1, r3
 8003162:	4603      	mov	r3, r0
 8003164:	4642      	mov	r2, r8
 8003166:	189b      	adds	r3, r3, r2
 8003168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800316c:	464b      	mov	r3, r9
 800316e:	460a      	mov	r2, r1
 8003170:	eb42 0303 	adc.w	r3, r2, r3
 8003174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
 8003182:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003190:	4649      	mov	r1, r9
 8003192:	008b      	lsls	r3, r1, #2
 8003194:	4641      	mov	r1, r8
 8003196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800319a:	4641      	mov	r1, r8
 800319c:	008a      	lsls	r2, r1, #2
 800319e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031a2:	f7fd f88d 	bl	80002c0 <__aeabi_uldivmod>
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	4b38      	ldr	r3, [pc, #224]	; (8003290 <UART_SetConfig+0x4e4>)
 80031ae:	fba3 2301 	umull	r2, r3, r3, r1
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2264      	movs	r2, #100	; 0x64
 80031b6:	fb02 f303 	mul.w	r3, r2, r3
 80031ba:	1acb      	subs	r3, r1, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a33      	ldr	r2, [pc, #204]	; (8003290 <UART_SetConfig+0x4e4>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	441c      	add	r4, r3
 80031ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d2:	2200      	movs	r2, #0
 80031d4:	673b      	str	r3, [r7, #112]	; 0x70
 80031d6:	677a      	str	r2, [r7, #116]	; 0x74
 80031d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	1891      	adds	r1, r2, r2
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	415b      	adcs	r3, r3
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ec:	4641      	mov	r1, r8
 80031ee:	1851      	adds	r1, r2, r1
 80031f0:	6039      	str	r1, [r7, #0]
 80031f2:	4649      	mov	r1, r9
 80031f4:	414b      	adcs	r3, r1
 80031f6:	607b      	str	r3, [r7, #4]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003204:	4659      	mov	r1, fp
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4651      	mov	r1, sl
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4651      	mov	r1, sl
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4642      	mov	r2, r8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	66bb      	str	r3, [r7, #104]	; 0x68
 800321e:	464b      	mov	r3, r9
 8003220:	460a      	mov	r2, r1
 8003222:	eb42 0303 	adc.w	r3, r2, r3
 8003226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	663b      	str	r3, [r7, #96]	; 0x60
 8003232:	667a      	str	r2, [r7, #100]	; 0x64
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003240:	4649      	mov	r1, r9
 8003242:	008b      	lsls	r3, r1, #2
 8003244:	4641      	mov	r1, r8
 8003246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324a:	4641      	mov	r1, r8
 800324c:	008a      	lsls	r2, r1, #2
 800324e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003252:	f7fd f835 	bl	80002c0 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <UART_SetConfig+0x4e4>)
 800325c:	fba3 1302 	umull	r1, r3, r3, r2
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	2164      	movs	r1, #100	; 0x64
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	3332      	adds	r3, #50	; 0x32
 800326e:	4a08      	ldr	r2, [pc, #32]	; (8003290 <UART_SetConfig+0x4e4>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	f003 020f 	and.w	r2, r3, #15
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4422      	add	r2, r4
 8003282:	609a      	str	r2, [r3, #8]
}
 8003284:	bf00      	nop
 8003286:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800328a:	46bd      	mov	sp, r7
 800328c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003290:	51eb851f 	.word	0x51eb851f

08003294 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003294:	b084      	sub	sp, #16
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	f107 001c 	add.w	r0, r7, #28
 80032a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d123      	bne.n	80032f6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80032d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fa9a 	bl	8003824 <USB_CoreReset>
 80032f0:	4603      	mov	r3, r0
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	e01b      	b.n	800332e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fa8e 	bl	8003824 <USB_CoreReset>
 8003308:	4603      	mov	r3, r0
 800330a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800330c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	639a      	str	r2, [r3, #56]	; 0x38
 8003320:	e005      	b.n	800332e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800332e:	7fbb      	ldrb	r3, [r7, #30]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d10b      	bne.n	800334c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f043 0206 	orr.w	r2, r3, #6
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003358:	b004      	add	sp, #16
 800335a:	4770      	bx	lr

0800335c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f023 0201 	bic.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b084      	sub	sp, #16
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d115      	bne.n	80033cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033ac:	200a      	movs	r0, #10
 80033ae:	f7fd fdbd 	bl	8000f2c <HAL_Delay>
      ms += 10U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	330a      	adds	r3, #10
 80033b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fa25 	bl	8003808 <USB_GetMode>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d01e      	beq.n	8003402 <USB_SetCurrentMode+0x84>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2bc7      	cmp	r3, #199	; 0xc7
 80033c8:	d9f0      	bls.n	80033ac <USB_SetCurrentMode+0x2e>
 80033ca:	e01a      	b.n	8003402 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80033cc:	78fb      	ldrb	r3, [r7, #3]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d115      	bne.n	80033fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80033de:	200a      	movs	r0, #10
 80033e0:	f7fd fda4 	bl	8000f2c <HAL_Delay>
      ms += 10U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	330a      	adds	r3, #10
 80033e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fa0c 	bl	8003808 <USB_GetMode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <USB_SetCurrentMode+0x84>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2bc7      	cmp	r3, #199	; 0xc7
 80033fa:	d9f0      	bls.n	80033de <USB_SetCurrentMode+0x60>
 80033fc:	e001      	b.n	8003402 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e005      	b.n	800340e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2bc8      	cmp	r3, #200	; 0xc8
 8003406:	d101      	bne.n	800340c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003418:	b084      	sub	sp, #16
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e009      	b.n	800344c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	3340      	adds	r3, #64	; 0x40
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	2200      	movs	r2, #0
 8003444:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	3301      	adds	r3, #1
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b0e      	cmp	r3, #14
 8003450:	d9f2      	bls.n	8003438 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003452:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003456:	2b00      	cmp	r3, #0
 8003458:	d11c      	bne.n	8003494 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	e005      	b.n	80034a0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034a6:	461a      	mov	r2, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ac:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d10d      	bne.n	80034d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80034b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d104      	bne.n	80034c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80034bc:	2100      	movs	r1, #0
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f968 	bl	8003794 <USB_SetDevSpeed>
 80034c4:	e008      	b.n	80034d8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80034c6:	2101      	movs	r1, #1
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f963 	bl	8003794 <USB_SetDevSpeed>
 80034ce:	e003      	b.n	80034d8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80034d0:	2103      	movs	r1, #3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f95e 	bl	8003794 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80034d8:	2110      	movs	r1, #16
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8fa 	bl	80036d4 <USB_FlushTxFifo>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f924 	bl	8003738 <USB_FlushRxFifo>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	461a      	mov	r2, r3
 8003502:	2300      	movs	r3, #0
 8003504:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800350c:	461a      	mov	r2, r3
 800350e:	2300      	movs	r3, #0
 8003510:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003518:	461a      	mov	r2, r3
 800351a:	2300      	movs	r3, #0
 800351c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	e043      	b.n	80035ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800353a:	d118      	bne.n	800356e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354e:	461a      	mov	r2, r3
 8003550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e013      	b.n	8003580 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	461a      	mov	r2, r3
 8003566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	e008      	b.n	8003580 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357a:	461a      	mov	r2, r3
 800357c:	2300      	movs	r3, #0
 800357e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	2300      	movs	r3, #0
 8003590:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	015a      	lsls	r2, r3, #5
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359e:	461a      	mov	r2, r3
 80035a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	3301      	adds	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80035b0:	461a      	mov	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d3b5      	bcc.n	8003524 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e043      	b.n	8003646 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035d4:	d118      	bne.n	8003608 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10a      	bne.n	80035f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	461a      	mov	r2, r3
 80035ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e013      	b.n	800361a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fe:	461a      	mov	r2, r3
 8003600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e008      	b.n	800361a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	2300      	movs	r3, #0
 8003618:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4413      	add	r3, r2
 8003622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003626:	461a      	mov	r2, r3
 8003628:	2300      	movs	r3, #0
 800362a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003638:	461a      	mov	r2, r3
 800363a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800363e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	3301      	adds	r3, #1
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800364a:	461a      	mov	r2, r3
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4293      	cmp	r3, r2
 8003650:	d3b5      	bcc.n	80035be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003672:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003674:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	f043 0210 	orr.w	r2, r3, #16
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <USB_DevInit+0x2b8>)
 800368e:	4313      	orrs	r3, r2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003694:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	f043 0208 	orr.w	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80036a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d107      	bne.n	80036c0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80036c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036cc:	b004      	add	sp, #16
 80036ce:	4770      	bx	lr
 80036d0:	803c3800 	.word	0x803c3800

080036d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80036ee:	d901      	bls.n	80036f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e01b      	b.n	800372c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	daf2      	bge.n	80036e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	019b      	lsls	r3, r3, #6
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3301      	adds	r3, #1
 8003710:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003718:	d901      	bls.n	800371e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e006      	b.n	800372c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0320 	and.w	r3, r3, #32
 8003726:	2b20      	cmp	r3, #32
 8003728:	d0f0      	beq.n	800370c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003750:	d901      	bls.n	8003756 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e018      	b.n	8003788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	daf2      	bge.n	8003744 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2210      	movs	r2, #16
 8003766:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003774:	d901      	bls.n	800377a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e006      	b.n	8003788 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b10      	cmp	r3, #16
 8003784:	d0f0      	beq.n	8003768 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	68f9      	ldr	r1, [r7, #12]
 80037b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b4:	4313      	orrs	r3, r2
 80037b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80037e0:	f023 0303 	bic.w	r3, r3, #3
 80037e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f4:	f043 0302 	orr.w	r3, r3, #2
 80037f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3301      	adds	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800383c:	d901      	bls.n	8003842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e01b      	b.n	800387a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	daf2      	bge.n	8003830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3301      	adds	r3, #1
 800385e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003866:	d901      	bls.n	800386c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e006      	b.n	800387a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d0f0      	beq.n	800385a <USB_CoreReset+0x36>

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <siprintf>:
 8003888:	b40e      	push	{r1, r2, r3}
 800388a:	b500      	push	{lr}
 800388c:	b09c      	sub	sp, #112	; 0x70
 800388e:	ab1d      	add	r3, sp, #116	; 0x74
 8003890:	9002      	str	r0, [sp, #8]
 8003892:	9006      	str	r0, [sp, #24]
 8003894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003898:	4809      	ldr	r0, [pc, #36]	; (80038c0 <siprintf+0x38>)
 800389a:	9107      	str	r1, [sp, #28]
 800389c:	9104      	str	r1, [sp, #16]
 800389e:	4909      	ldr	r1, [pc, #36]	; (80038c4 <siprintf+0x3c>)
 80038a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a4:	9105      	str	r1, [sp, #20]
 80038a6:	6800      	ldr	r0, [r0, #0]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	a902      	add	r1, sp, #8
 80038ac:	f000 f89a 	bl	80039e4 <_svfiprintf_r>
 80038b0:	9b02      	ldr	r3, [sp, #8]
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	b01c      	add	sp, #112	; 0x70
 80038b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80038bc:	b003      	add	sp, #12
 80038be:	4770      	bx	lr
 80038c0:	20000058 	.word	0x20000058
 80038c4:	ffff0208 	.word	0xffff0208

080038c8 <memset>:
 80038c8:	4402      	add	r2, r0
 80038ca:	4603      	mov	r3, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <__errno>:
 80038d8:	4b01      	ldr	r3, [pc, #4]	; (80038e0 <__errno+0x8>)
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000058 	.word	0x20000058

080038e4 <__libc_init_array>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4d0d      	ldr	r5, [pc, #52]	; (800391c <__libc_init_array+0x38>)
 80038e8:	4c0d      	ldr	r4, [pc, #52]	; (8003920 <__libc_init_array+0x3c>)
 80038ea:	1b64      	subs	r4, r4, r5
 80038ec:	10a4      	asrs	r4, r4, #2
 80038ee:	2600      	movs	r6, #0
 80038f0:	42a6      	cmp	r6, r4
 80038f2:	d109      	bne.n	8003908 <__libc_init_array+0x24>
 80038f4:	4d0b      	ldr	r5, [pc, #44]	; (8003924 <__libc_init_array+0x40>)
 80038f6:	4c0c      	ldr	r4, [pc, #48]	; (8003928 <__libc_init_array+0x44>)
 80038f8:	f000 fc6a 	bl	80041d0 <_init>
 80038fc:	1b64      	subs	r4, r4, r5
 80038fe:	10a4      	asrs	r4, r4, #2
 8003900:	2600      	movs	r6, #0
 8003902:	42a6      	cmp	r6, r4
 8003904:	d105      	bne.n	8003912 <__libc_init_array+0x2e>
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	f855 3b04 	ldr.w	r3, [r5], #4
 800390c:	4798      	blx	r3
 800390e:	3601      	adds	r6, #1
 8003910:	e7ee      	b.n	80038f0 <__libc_init_array+0xc>
 8003912:	f855 3b04 	ldr.w	r3, [r5], #4
 8003916:	4798      	blx	r3
 8003918:	3601      	adds	r6, #1
 800391a:	e7f2      	b.n	8003902 <__libc_init_array+0x1e>
 800391c:	0800426c 	.word	0x0800426c
 8003920:	0800426c 	.word	0x0800426c
 8003924:	0800426c 	.word	0x0800426c
 8003928:	08004270 	.word	0x08004270

0800392c <__retarget_lock_acquire_recursive>:
 800392c:	4770      	bx	lr

0800392e <__retarget_lock_release_recursive>:
 800392e:	4770      	bx	lr

08003930 <__ssputs_r>:
 8003930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003934:	688e      	ldr	r6, [r1, #8]
 8003936:	461f      	mov	r7, r3
 8003938:	42be      	cmp	r6, r7
 800393a:	680b      	ldr	r3, [r1, #0]
 800393c:	4682      	mov	sl, r0
 800393e:	460c      	mov	r4, r1
 8003940:	4690      	mov	r8, r2
 8003942:	d82c      	bhi.n	800399e <__ssputs_r+0x6e>
 8003944:	898a      	ldrh	r2, [r1, #12]
 8003946:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800394a:	d026      	beq.n	800399a <__ssputs_r+0x6a>
 800394c:	6965      	ldr	r5, [r4, #20]
 800394e:	6909      	ldr	r1, [r1, #16]
 8003950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003954:	eba3 0901 	sub.w	r9, r3, r1
 8003958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800395c:	1c7b      	adds	r3, r7, #1
 800395e:	444b      	add	r3, r9
 8003960:	106d      	asrs	r5, r5, #1
 8003962:	429d      	cmp	r5, r3
 8003964:	bf38      	it	cc
 8003966:	461d      	movcc	r5, r3
 8003968:	0553      	lsls	r3, r2, #21
 800396a:	d527      	bpl.n	80039bc <__ssputs_r+0x8c>
 800396c:	4629      	mov	r1, r5
 800396e:	f000 f957 	bl	8003c20 <_malloc_r>
 8003972:	4606      	mov	r6, r0
 8003974:	b360      	cbz	r0, 80039d0 <__ssputs_r+0xa0>
 8003976:	6921      	ldr	r1, [r4, #16]
 8003978:	464a      	mov	r2, r9
 800397a:	f000 fbc7 	bl	800410c <memcpy>
 800397e:	89a3      	ldrh	r3, [r4, #12]
 8003980:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003988:	81a3      	strh	r3, [r4, #12]
 800398a:	6126      	str	r6, [r4, #16]
 800398c:	6165      	str	r5, [r4, #20]
 800398e:	444e      	add	r6, r9
 8003990:	eba5 0509 	sub.w	r5, r5, r9
 8003994:	6026      	str	r6, [r4, #0]
 8003996:	60a5      	str	r5, [r4, #8]
 8003998:	463e      	mov	r6, r7
 800399a:	42be      	cmp	r6, r7
 800399c:	d900      	bls.n	80039a0 <__ssputs_r+0x70>
 800399e:	463e      	mov	r6, r7
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	4632      	mov	r2, r6
 80039a4:	4641      	mov	r1, r8
 80039a6:	f000 fb86 	bl	80040b6 <memmove>
 80039aa:	68a3      	ldr	r3, [r4, #8]
 80039ac:	1b9b      	subs	r3, r3, r6
 80039ae:	60a3      	str	r3, [r4, #8]
 80039b0:	6823      	ldr	r3, [r4, #0]
 80039b2:	4433      	add	r3, r6
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	2000      	movs	r0, #0
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	462a      	mov	r2, r5
 80039be:	f000 fb4b 	bl	8004058 <_realloc_r>
 80039c2:	4606      	mov	r6, r0
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d1e0      	bne.n	800398a <__ssputs_r+0x5a>
 80039c8:	6921      	ldr	r1, [r4, #16]
 80039ca:	4650      	mov	r0, sl
 80039cc:	f000 fbac 	bl	8004128 <_free_r>
 80039d0:	230c      	movs	r3, #12
 80039d2:	f8ca 3000 	str.w	r3, [sl]
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039dc:	81a3      	strh	r3, [r4, #12]
 80039de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e2:	e7e9      	b.n	80039b8 <__ssputs_r+0x88>

080039e4 <_svfiprintf_r>:
 80039e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e8:	4698      	mov	r8, r3
 80039ea:	898b      	ldrh	r3, [r1, #12]
 80039ec:	061b      	lsls	r3, r3, #24
 80039ee:	b09d      	sub	sp, #116	; 0x74
 80039f0:	4607      	mov	r7, r0
 80039f2:	460d      	mov	r5, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	d50e      	bpl.n	8003a16 <_svfiprintf_r+0x32>
 80039f8:	690b      	ldr	r3, [r1, #16]
 80039fa:	b963      	cbnz	r3, 8003a16 <_svfiprintf_r+0x32>
 80039fc:	2140      	movs	r1, #64	; 0x40
 80039fe:	f000 f90f 	bl	8003c20 <_malloc_r>
 8003a02:	6028      	str	r0, [r5, #0]
 8003a04:	6128      	str	r0, [r5, #16]
 8003a06:	b920      	cbnz	r0, 8003a12 <_svfiprintf_r+0x2e>
 8003a08:	230c      	movs	r3, #12
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a10:	e0d0      	b.n	8003bb4 <_svfiprintf_r+0x1d0>
 8003a12:	2340      	movs	r3, #64	; 0x40
 8003a14:	616b      	str	r3, [r5, #20]
 8003a16:	2300      	movs	r3, #0
 8003a18:	9309      	str	r3, [sp, #36]	; 0x24
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a24:	2330      	movs	r3, #48	; 0x30
 8003a26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003bcc <_svfiprintf_r+0x1e8>
 8003a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a2e:	f04f 0901 	mov.w	r9, #1
 8003a32:	4623      	mov	r3, r4
 8003a34:	469a      	mov	sl, r3
 8003a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a3a:	b10a      	cbz	r2, 8003a40 <_svfiprintf_r+0x5c>
 8003a3c:	2a25      	cmp	r2, #37	; 0x25
 8003a3e:	d1f9      	bne.n	8003a34 <_svfiprintf_r+0x50>
 8003a40:	ebba 0b04 	subs.w	fp, sl, r4
 8003a44:	d00b      	beq.n	8003a5e <_svfiprintf_r+0x7a>
 8003a46:	465b      	mov	r3, fp
 8003a48:	4622      	mov	r2, r4
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	f7ff ff6f 	bl	8003930 <__ssputs_r>
 8003a52:	3001      	adds	r0, #1
 8003a54:	f000 80a9 	beq.w	8003baa <_svfiprintf_r+0x1c6>
 8003a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a5a:	445a      	add	r2, fp
 8003a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80a1 	beq.w	8003baa <_svfiprintf_r+0x1c6>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a72:	f10a 0a01 	add.w	sl, sl, #1
 8003a76:	9304      	str	r3, [sp, #16]
 8003a78:	9307      	str	r3, [sp, #28]
 8003a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a80:	4654      	mov	r4, sl
 8003a82:	2205      	movs	r2, #5
 8003a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a88:	4850      	ldr	r0, [pc, #320]	; (8003bcc <_svfiprintf_r+0x1e8>)
 8003a8a:	f7fc fbc9 	bl	8000220 <memchr>
 8003a8e:	9a04      	ldr	r2, [sp, #16]
 8003a90:	b9d8      	cbnz	r0, 8003aca <_svfiprintf_r+0xe6>
 8003a92:	06d0      	lsls	r0, r2, #27
 8003a94:	bf44      	itt	mi
 8003a96:	2320      	movmi	r3, #32
 8003a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a9c:	0711      	lsls	r1, r2, #28
 8003a9e:	bf44      	itt	mi
 8003aa0:	232b      	movmi	r3, #43	; 0x2b
 8003aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8003aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003aac:	d015      	beq.n	8003ada <_svfiprintf_r+0xf6>
 8003aae:	9a07      	ldr	r2, [sp, #28]
 8003ab0:	4654      	mov	r4, sl
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f04f 0c0a 	mov.w	ip, #10
 8003ab8:	4621      	mov	r1, r4
 8003aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003abe:	3b30      	subs	r3, #48	; 0x30
 8003ac0:	2b09      	cmp	r3, #9
 8003ac2:	d94d      	bls.n	8003b60 <_svfiprintf_r+0x17c>
 8003ac4:	b1b0      	cbz	r0, 8003af4 <_svfiprintf_r+0x110>
 8003ac6:	9207      	str	r2, [sp, #28]
 8003ac8:	e014      	b.n	8003af4 <_svfiprintf_r+0x110>
 8003aca:	eba0 0308 	sub.w	r3, r0, r8
 8003ace:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	9304      	str	r3, [sp, #16]
 8003ad6:	46a2      	mov	sl, r4
 8003ad8:	e7d2      	b.n	8003a80 <_svfiprintf_r+0x9c>
 8003ada:	9b03      	ldr	r3, [sp, #12]
 8003adc:	1d19      	adds	r1, r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	9103      	str	r1, [sp, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bfbb      	ittet	lt
 8003ae6:	425b      	neglt	r3, r3
 8003ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8003aec:	9307      	strge	r3, [sp, #28]
 8003aee:	9307      	strlt	r3, [sp, #28]
 8003af0:	bfb8      	it	lt
 8003af2:	9204      	strlt	r2, [sp, #16]
 8003af4:	7823      	ldrb	r3, [r4, #0]
 8003af6:	2b2e      	cmp	r3, #46	; 0x2e
 8003af8:	d10c      	bne.n	8003b14 <_svfiprintf_r+0x130>
 8003afa:	7863      	ldrb	r3, [r4, #1]
 8003afc:	2b2a      	cmp	r3, #42	; 0x2a
 8003afe:	d134      	bne.n	8003b6a <_svfiprintf_r+0x186>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	9203      	str	r2, [sp, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bfb8      	it	lt
 8003b0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b10:	3402      	adds	r4, #2
 8003b12:	9305      	str	r3, [sp, #20]
 8003b14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003bdc <_svfiprintf_r+0x1f8>
 8003b18:	7821      	ldrb	r1, [r4, #0]
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	4650      	mov	r0, sl
 8003b1e:	f7fc fb7f 	bl	8000220 <memchr>
 8003b22:	b138      	cbz	r0, 8003b34 <_svfiprintf_r+0x150>
 8003b24:	9b04      	ldr	r3, [sp, #16]
 8003b26:	eba0 000a 	sub.w	r0, r0, sl
 8003b2a:	2240      	movs	r2, #64	; 0x40
 8003b2c:	4082      	lsls	r2, r0
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	3401      	adds	r4, #1
 8003b32:	9304      	str	r3, [sp, #16]
 8003b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b38:	4825      	ldr	r0, [pc, #148]	; (8003bd0 <_svfiprintf_r+0x1ec>)
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b3e:	2206      	movs	r2, #6
 8003b40:	f7fc fb6e 	bl	8000220 <memchr>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d038      	beq.n	8003bba <_svfiprintf_r+0x1d6>
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <_svfiprintf_r+0x1f0>)
 8003b4a:	bb1b      	cbnz	r3, 8003b94 <_svfiprintf_r+0x1b0>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	3307      	adds	r3, #7
 8003b50:	f023 0307 	bic.w	r3, r3, #7
 8003b54:	3308      	adds	r3, #8
 8003b56:	9303      	str	r3, [sp, #12]
 8003b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b5a:	4433      	add	r3, r6
 8003b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b5e:	e768      	b.n	8003a32 <_svfiprintf_r+0x4e>
 8003b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b64:	460c      	mov	r4, r1
 8003b66:	2001      	movs	r0, #1
 8003b68:	e7a6      	b.n	8003ab8 <_svfiprintf_r+0xd4>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	3401      	adds	r4, #1
 8003b6e:	9305      	str	r3, [sp, #20]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f04f 0c0a 	mov.w	ip, #10
 8003b76:	4620      	mov	r0, r4
 8003b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7c:	3a30      	subs	r2, #48	; 0x30
 8003b7e:	2a09      	cmp	r2, #9
 8003b80:	d903      	bls.n	8003b8a <_svfiprintf_r+0x1a6>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0c6      	beq.n	8003b14 <_svfiprintf_r+0x130>
 8003b86:	9105      	str	r1, [sp, #20]
 8003b88:	e7c4      	b.n	8003b14 <_svfiprintf_r+0x130>
 8003b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b8e:	4604      	mov	r4, r0
 8003b90:	2301      	movs	r3, #1
 8003b92:	e7f0      	b.n	8003b76 <_svfiprintf_r+0x192>
 8003b94:	ab03      	add	r3, sp, #12
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4b0f      	ldr	r3, [pc, #60]	; (8003bd8 <_svfiprintf_r+0x1f4>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	4638      	mov	r0, r7
 8003ba0:	f3af 8000 	nop.w
 8003ba4:	1c42      	adds	r2, r0, #1
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	d1d6      	bne.n	8003b58 <_svfiprintf_r+0x174>
 8003baa:	89ab      	ldrh	r3, [r5, #12]
 8003bac:	065b      	lsls	r3, r3, #25
 8003bae:	f53f af2d 	bmi.w	8003a0c <_svfiprintf_r+0x28>
 8003bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bb4:	b01d      	add	sp, #116	; 0x74
 8003bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bba:	ab03      	add	r3, sp, #12
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <_svfiprintf_r+0x1f4>)
 8003bc2:	a904      	add	r1, sp, #16
 8003bc4:	4638      	mov	r0, r7
 8003bc6:	f000 f919 	bl	8003dfc <_printf_i>
 8003bca:	e7eb      	b.n	8003ba4 <_svfiprintf_r+0x1c0>
 8003bcc:	08004230 	.word	0x08004230
 8003bd0:	0800423a 	.word	0x0800423a
 8003bd4:	00000000 	.word	0x00000000
 8003bd8:	08003931 	.word	0x08003931
 8003bdc:	08004236 	.word	0x08004236

08003be0 <sbrk_aligned>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	4e0e      	ldr	r6, [pc, #56]	; (8003c1c <sbrk_aligned+0x3c>)
 8003be4:	460c      	mov	r4, r1
 8003be6:	6831      	ldr	r1, [r6, #0]
 8003be8:	4605      	mov	r5, r0
 8003bea:	b911      	cbnz	r1, 8003bf2 <sbrk_aligned+0x12>
 8003bec:	f000 fa7e 	bl	80040ec <_sbrk_r>
 8003bf0:	6030      	str	r0, [r6, #0]
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f000 fa79 	bl	80040ec <_sbrk_r>
 8003bfa:	1c43      	adds	r3, r0, #1
 8003bfc:	d00a      	beq.n	8003c14 <sbrk_aligned+0x34>
 8003bfe:	1cc4      	adds	r4, r0, #3
 8003c00:	f024 0403 	bic.w	r4, r4, #3
 8003c04:	42a0      	cmp	r0, r4
 8003c06:	d007      	beq.n	8003c18 <sbrk_aligned+0x38>
 8003c08:	1a21      	subs	r1, r4, r0
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	f000 fa6e 	bl	80040ec <_sbrk_r>
 8003c10:	3001      	adds	r0, #1
 8003c12:	d101      	bne.n	8003c18 <sbrk_aligned+0x38>
 8003c14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c18:	4620      	mov	r0, r4
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	20000734 	.word	0x20000734

08003c20 <_malloc_r>:
 8003c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c24:	1ccd      	adds	r5, r1, #3
 8003c26:	f025 0503 	bic.w	r5, r5, #3
 8003c2a:	3508      	adds	r5, #8
 8003c2c:	2d0c      	cmp	r5, #12
 8003c2e:	bf38      	it	cc
 8003c30:	250c      	movcc	r5, #12
 8003c32:	2d00      	cmp	r5, #0
 8003c34:	4607      	mov	r7, r0
 8003c36:	db01      	blt.n	8003c3c <_malloc_r+0x1c>
 8003c38:	42a9      	cmp	r1, r5
 8003c3a:	d905      	bls.n	8003c48 <_malloc_r+0x28>
 8003c3c:	230c      	movs	r3, #12
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	2600      	movs	r6, #0
 8003c42:	4630      	mov	r0, r6
 8003c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d1c <_malloc_r+0xfc>
 8003c4c:	f000 f9f8 	bl	8004040 <__malloc_lock>
 8003c50:	f8d8 3000 	ldr.w	r3, [r8]
 8003c54:	461c      	mov	r4, r3
 8003c56:	bb5c      	cbnz	r4, 8003cb0 <_malloc_r+0x90>
 8003c58:	4629      	mov	r1, r5
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	f7ff ffc0 	bl	8003be0 <sbrk_aligned>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	4604      	mov	r4, r0
 8003c64:	d155      	bne.n	8003d12 <_malloc_r+0xf2>
 8003c66:	f8d8 4000 	ldr.w	r4, [r8]
 8003c6a:	4626      	mov	r6, r4
 8003c6c:	2e00      	cmp	r6, #0
 8003c6e:	d145      	bne.n	8003cfc <_malloc_r+0xdc>
 8003c70:	2c00      	cmp	r4, #0
 8003c72:	d048      	beq.n	8003d06 <_malloc_r+0xe6>
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	4631      	mov	r1, r6
 8003c78:	4638      	mov	r0, r7
 8003c7a:	eb04 0903 	add.w	r9, r4, r3
 8003c7e:	f000 fa35 	bl	80040ec <_sbrk_r>
 8003c82:	4581      	cmp	r9, r0
 8003c84:	d13f      	bne.n	8003d06 <_malloc_r+0xe6>
 8003c86:	6821      	ldr	r1, [r4, #0]
 8003c88:	1a6d      	subs	r5, r5, r1
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f7ff ffa7 	bl	8003be0 <sbrk_aligned>
 8003c92:	3001      	adds	r0, #1
 8003c94:	d037      	beq.n	8003d06 <_malloc_r+0xe6>
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	442b      	add	r3, r5
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d038      	beq.n	8003d16 <_malloc_r+0xf6>
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	42a2      	cmp	r2, r4
 8003ca8:	d12b      	bne.n	8003d02 <_malloc_r+0xe2>
 8003caa:	2200      	movs	r2, #0
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	e00f      	b.n	8003cd0 <_malloc_r+0xb0>
 8003cb0:	6822      	ldr	r2, [r4, #0]
 8003cb2:	1b52      	subs	r2, r2, r5
 8003cb4:	d41f      	bmi.n	8003cf6 <_malloc_r+0xd6>
 8003cb6:	2a0b      	cmp	r2, #11
 8003cb8:	d917      	bls.n	8003cea <_malloc_r+0xca>
 8003cba:	1961      	adds	r1, r4, r5
 8003cbc:	42a3      	cmp	r3, r4
 8003cbe:	6025      	str	r5, [r4, #0]
 8003cc0:	bf18      	it	ne
 8003cc2:	6059      	strne	r1, [r3, #4]
 8003cc4:	6863      	ldr	r3, [r4, #4]
 8003cc6:	bf08      	it	eq
 8003cc8:	f8c8 1000 	streq.w	r1, [r8]
 8003ccc:	5162      	str	r2, [r4, r5]
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f104 060b 	add.w	r6, r4, #11
 8003cd6:	f000 f9b9 	bl	800404c <__malloc_unlock>
 8003cda:	f026 0607 	bic.w	r6, r6, #7
 8003cde:	1d23      	adds	r3, r4, #4
 8003ce0:	1af2      	subs	r2, r6, r3
 8003ce2:	d0ae      	beq.n	8003c42 <_malloc_r+0x22>
 8003ce4:	1b9b      	subs	r3, r3, r6
 8003ce6:	50a3      	str	r3, [r4, r2]
 8003ce8:	e7ab      	b.n	8003c42 <_malloc_r+0x22>
 8003cea:	42a3      	cmp	r3, r4
 8003cec:	6862      	ldr	r2, [r4, #4]
 8003cee:	d1dd      	bne.n	8003cac <_malloc_r+0x8c>
 8003cf0:	f8c8 2000 	str.w	r2, [r8]
 8003cf4:	e7ec      	b.n	8003cd0 <_malloc_r+0xb0>
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	6864      	ldr	r4, [r4, #4]
 8003cfa:	e7ac      	b.n	8003c56 <_malloc_r+0x36>
 8003cfc:	4634      	mov	r4, r6
 8003cfe:	6876      	ldr	r6, [r6, #4]
 8003d00:	e7b4      	b.n	8003c6c <_malloc_r+0x4c>
 8003d02:	4613      	mov	r3, r2
 8003d04:	e7cc      	b.n	8003ca0 <_malloc_r+0x80>
 8003d06:	230c      	movs	r3, #12
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4638      	mov	r0, r7
 8003d0c:	f000 f99e 	bl	800404c <__malloc_unlock>
 8003d10:	e797      	b.n	8003c42 <_malloc_r+0x22>
 8003d12:	6025      	str	r5, [r4, #0]
 8003d14:	e7dc      	b.n	8003cd0 <_malloc_r+0xb0>
 8003d16:	605b      	str	r3, [r3, #4]
 8003d18:	deff      	udf	#255	; 0xff
 8003d1a:	bf00      	nop
 8003d1c:	20000730 	.word	0x20000730

08003d20 <_printf_common>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4616      	mov	r6, r2
 8003d26:	4699      	mov	r9, r3
 8003d28:	688a      	ldr	r2, [r1, #8]
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfb8      	it	lt
 8003d34:	4613      	movlt	r3, r2
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	b10a      	cbz	r2, 8003d46 <_printf_common+0x26>
 8003d42:	3301      	adds	r3, #1
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	0699      	lsls	r1, r3, #26
 8003d4a:	bf42      	ittt	mi
 8003d4c:	6833      	ldrmi	r3, [r6, #0]
 8003d4e:	3302      	addmi	r3, #2
 8003d50:	6033      	strmi	r3, [r6, #0]
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	f015 0506 	ands.w	r5, r5, #6
 8003d58:	d106      	bne.n	8003d68 <_printf_common+0x48>
 8003d5a:	f104 0a19 	add.w	sl, r4, #25
 8003d5e:	68e3      	ldr	r3, [r4, #12]
 8003d60:	6832      	ldr	r2, [r6, #0]
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	42ab      	cmp	r3, r5
 8003d66:	dc26      	bgt.n	8003db6 <_printf_common+0x96>
 8003d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d6c:	1e13      	subs	r3, r2, #0
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	bf18      	it	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	0692      	lsls	r2, r2, #26
 8003d76:	d42b      	bmi.n	8003dd0 <_printf_common+0xb0>
 8003d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c0      	blx	r8
 8003d82:	3001      	adds	r0, #1
 8003d84:	d01e      	beq.n	8003dc4 <_printf_common+0xa4>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	6922      	ldr	r2, [r4, #16]
 8003d8a:	f003 0306 	and.w	r3, r3, #6
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf02      	ittt	eq
 8003d92:	68e5      	ldreq	r5, [r4, #12]
 8003d94:	6833      	ldreq	r3, [r6, #0]
 8003d96:	1aed      	subeq	r5, r5, r3
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	bf0c      	ite	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	2500      	movne	r5, #0
 8003da2:	4293      	cmp	r3, r2
 8003da4:	bfc4      	itt	gt
 8003da6:	1a9b      	subgt	r3, r3, r2
 8003da8:	18ed      	addgt	r5, r5, r3
 8003daa:	2600      	movs	r6, #0
 8003dac:	341a      	adds	r4, #26
 8003dae:	42b5      	cmp	r5, r6
 8003db0:	d11a      	bne.n	8003de8 <_printf_common+0xc8>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e008      	b.n	8003dc8 <_printf_common+0xa8>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4649      	mov	r1, r9
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c0      	blx	r8
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d103      	bne.n	8003dcc <_printf_common+0xac>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7c6      	b.n	8003d5e <_printf_common+0x3e>
 8003dd0:	18e1      	adds	r1, r4, r3
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	2030      	movs	r0, #48	; 0x30
 8003dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003dda:	4422      	add	r2, r4
 8003ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003de4:	3302      	adds	r3, #2
 8003de6:	e7c7      	b.n	8003d78 <_printf_common+0x58>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4622      	mov	r2, r4
 8003dec:	4649      	mov	r1, r9
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0e6      	beq.n	8003dc4 <_printf_common+0xa4>
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7d9      	b.n	8003dae <_printf_common+0x8e>
	...

08003dfc <_printf_i>:
 8003dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	7e0f      	ldrb	r7, [r1, #24]
 8003e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e04:	2f78      	cmp	r7, #120	; 0x78
 8003e06:	4691      	mov	r9, r2
 8003e08:	4680      	mov	r8, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	469a      	mov	sl, r3
 8003e0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e12:	d807      	bhi.n	8003e24 <_printf_i+0x28>
 8003e14:	2f62      	cmp	r7, #98	; 0x62
 8003e16:	d80a      	bhi.n	8003e2e <_printf_i+0x32>
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	f000 80d4 	beq.w	8003fc6 <_printf_i+0x1ca>
 8003e1e:	2f58      	cmp	r7, #88	; 0x58
 8003e20:	f000 80c0 	beq.w	8003fa4 <_printf_i+0x1a8>
 8003e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e2c:	e03a      	b.n	8003ea4 <_printf_i+0xa8>
 8003e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e32:	2b15      	cmp	r3, #21
 8003e34:	d8f6      	bhi.n	8003e24 <_printf_i+0x28>
 8003e36:	a101      	add	r1, pc, #4	; (adr r1, 8003e3c <_printf_i+0x40>)
 8003e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003e25 	.word	0x08003e25
 8003e48:	08003e25 	.word	0x08003e25
 8003e4c:	08003e25 	.word	0x08003e25
 8003e50:	08003e25 	.word	0x08003e25
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003e25 	.word	0x08003e25
 8003e5c:	08003e25 	.word	0x08003e25
 8003e60:	08003e25 	.word	0x08003e25
 8003e64:	08003e25 	.word	0x08003e25
 8003e68:	08003fad 	.word	0x08003fad
 8003e6c:	08003ed5 	.word	0x08003ed5
 8003e70:	08003f67 	.word	0x08003f67
 8003e74:	08003e25 	.word	0x08003e25
 8003e78:	08003e25 	.word	0x08003e25
 8003e7c:	08003fcf 	.word	0x08003fcf
 8003e80:	08003e25 	.word	0x08003e25
 8003e84:	08003ed5 	.word	0x08003ed5
 8003e88:	08003e25 	.word	0x08003e25
 8003e8c:	08003e25 	.word	0x08003e25
 8003e90:	08003f6f 	.word	0x08003f6f
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	602a      	str	r2, [r5, #0]
 8003e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e09f      	b.n	8003fe8 <_printf_i+0x1ec>
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	682b      	ldr	r3, [r5, #0]
 8003eac:	0607      	lsls	r7, r0, #24
 8003eae:	f103 0104 	add.w	r1, r3, #4
 8003eb2:	6029      	str	r1, [r5, #0]
 8003eb4:	d501      	bpl.n	8003eba <_printf_i+0xbe>
 8003eb6:	681e      	ldr	r6, [r3, #0]
 8003eb8:	e003      	b.n	8003ec2 <_printf_i+0xc6>
 8003eba:	0646      	lsls	r6, r0, #25
 8003ebc:	d5fb      	bpl.n	8003eb6 <_printf_i+0xba>
 8003ebe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	da03      	bge.n	8003ece <_printf_i+0xd2>
 8003ec6:	232d      	movs	r3, #45	; 0x2d
 8003ec8:	4276      	negs	r6, r6
 8003eca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ece:	485a      	ldr	r0, [pc, #360]	; (8004038 <_printf_i+0x23c>)
 8003ed0:	230a      	movs	r3, #10
 8003ed2:	e012      	b.n	8003efa <_printf_i+0xfe>
 8003ed4:	682b      	ldr	r3, [r5, #0]
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	1d19      	adds	r1, r3, #4
 8003eda:	6029      	str	r1, [r5, #0]
 8003edc:	0605      	lsls	r5, r0, #24
 8003ede:	d501      	bpl.n	8003ee4 <_printf_i+0xe8>
 8003ee0:	681e      	ldr	r6, [r3, #0]
 8003ee2:	e002      	b.n	8003eea <_printf_i+0xee>
 8003ee4:	0641      	lsls	r1, r0, #25
 8003ee6:	d5fb      	bpl.n	8003ee0 <_printf_i+0xe4>
 8003ee8:	881e      	ldrh	r6, [r3, #0]
 8003eea:	4853      	ldr	r0, [pc, #332]	; (8004038 <_printf_i+0x23c>)
 8003eec:	2f6f      	cmp	r7, #111	; 0x6f
 8003eee:	bf0c      	ite	eq
 8003ef0:	2308      	moveq	r3, #8
 8003ef2:	230a      	movne	r3, #10
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003efa:	6865      	ldr	r5, [r4, #4]
 8003efc:	60a5      	str	r5, [r4, #8]
 8003efe:	2d00      	cmp	r5, #0
 8003f00:	bfa2      	ittt	ge
 8003f02:	6821      	ldrge	r1, [r4, #0]
 8003f04:	f021 0104 	bicge.w	r1, r1, #4
 8003f08:	6021      	strge	r1, [r4, #0]
 8003f0a:	b90e      	cbnz	r6, 8003f10 <_printf_i+0x114>
 8003f0c:	2d00      	cmp	r5, #0
 8003f0e:	d04b      	beq.n	8003fa8 <_printf_i+0x1ac>
 8003f10:	4615      	mov	r5, r2
 8003f12:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f16:	fb03 6711 	mls	r7, r3, r1, r6
 8003f1a:	5dc7      	ldrb	r7, [r0, r7]
 8003f1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f20:	4637      	mov	r7, r6
 8003f22:	42bb      	cmp	r3, r7
 8003f24:	460e      	mov	r6, r1
 8003f26:	d9f4      	bls.n	8003f12 <_printf_i+0x116>
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d10b      	bne.n	8003f44 <_printf_i+0x148>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	07de      	lsls	r6, r3, #31
 8003f30:	d508      	bpl.n	8003f44 <_printf_i+0x148>
 8003f32:	6923      	ldr	r3, [r4, #16]
 8003f34:	6861      	ldr	r1, [r4, #4]
 8003f36:	4299      	cmp	r1, r3
 8003f38:	bfde      	ittt	le
 8003f3a:	2330      	movle	r3, #48	; 0x30
 8003f3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003f44:	1b52      	subs	r2, r2, r5
 8003f46:	6122      	str	r2, [r4, #16]
 8003f48:	f8cd a000 	str.w	sl, [sp]
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	aa03      	add	r2, sp, #12
 8003f50:	4621      	mov	r1, r4
 8003f52:	4640      	mov	r0, r8
 8003f54:	f7ff fee4 	bl	8003d20 <_printf_common>
 8003f58:	3001      	adds	r0, #1
 8003f5a:	d14a      	bne.n	8003ff2 <_printf_i+0x1f6>
 8003f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f60:	b004      	add	sp, #16
 8003f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	f043 0320 	orr.w	r3, r3, #32
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	4833      	ldr	r0, [pc, #204]	; (800403c <_printf_i+0x240>)
 8003f70:	2778      	movs	r7, #120	; 0x78
 8003f72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	6829      	ldr	r1, [r5, #0]
 8003f7a:	061f      	lsls	r7, r3, #24
 8003f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f80:	d402      	bmi.n	8003f88 <_printf_i+0x18c>
 8003f82:	065f      	lsls	r7, r3, #25
 8003f84:	bf48      	it	mi
 8003f86:	b2b6      	uxthmi	r6, r6
 8003f88:	07df      	lsls	r7, r3, #31
 8003f8a:	bf48      	it	mi
 8003f8c:	f043 0320 	orrmi.w	r3, r3, #32
 8003f90:	6029      	str	r1, [r5, #0]
 8003f92:	bf48      	it	mi
 8003f94:	6023      	strmi	r3, [r4, #0]
 8003f96:	b91e      	cbnz	r6, 8003fa0 <_printf_i+0x1a4>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	2310      	movs	r3, #16
 8003fa2:	e7a7      	b.n	8003ef4 <_printf_i+0xf8>
 8003fa4:	4824      	ldr	r0, [pc, #144]	; (8004038 <_printf_i+0x23c>)
 8003fa6:	e7e4      	b.n	8003f72 <_printf_i+0x176>
 8003fa8:	4615      	mov	r5, r2
 8003faa:	e7bd      	b.n	8003f28 <_printf_i+0x12c>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	6826      	ldr	r6, [r4, #0]
 8003fb0:	6961      	ldr	r1, [r4, #20]
 8003fb2:	1d18      	adds	r0, r3, #4
 8003fb4:	6028      	str	r0, [r5, #0]
 8003fb6:	0635      	lsls	r5, r6, #24
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	d501      	bpl.n	8003fc0 <_printf_i+0x1c4>
 8003fbc:	6019      	str	r1, [r3, #0]
 8003fbe:	e002      	b.n	8003fc6 <_printf_i+0x1ca>
 8003fc0:	0670      	lsls	r0, r6, #25
 8003fc2:	d5fb      	bpl.n	8003fbc <_printf_i+0x1c0>
 8003fc4:	8019      	strh	r1, [r3, #0]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	4615      	mov	r5, r2
 8003fcc:	e7bc      	b.n	8003f48 <_printf_i+0x14c>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	1d1a      	adds	r2, r3, #4
 8003fd2:	602a      	str	r2, [r5, #0]
 8003fd4:	681d      	ldr	r5, [r3, #0]
 8003fd6:	6862      	ldr	r2, [r4, #4]
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7fc f920 	bl	8000220 <memchr>
 8003fe0:	b108      	cbz	r0, 8003fe6 <_printf_i+0x1ea>
 8003fe2:	1b40      	subs	r0, r0, r5
 8003fe4:	6060      	str	r0, [r4, #4]
 8003fe6:	6863      	ldr	r3, [r4, #4]
 8003fe8:	6123      	str	r3, [r4, #16]
 8003fea:	2300      	movs	r3, #0
 8003fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ff0:	e7aa      	b.n	8003f48 <_printf_i+0x14c>
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	462a      	mov	r2, r5
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	4640      	mov	r0, r8
 8003ffa:	47d0      	blx	sl
 8003ffc:	3001      	adds	r0, #1
 8003ffe:	d0ad      	beq.n	8003f5c <_printf_i+0x160>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	079b      	lsls	r3, r3, #30
 8004004:	d413      	bmi.n	800402e <_printf_i+0x232>
 8004006:	68e0      	ldr	r0, [r4, #12]
 8004008:	9b03      	ldr	r3, [sp, #12]
 800400a:	4298      	cmp	r0, r3
 800400c:	bfb8      	it	lt
 800400e:	4618      	movlt	r0, r3
 8004010:	e7a6      	b.n	8003f60 <_printf_i+0x164>
 8004012:	2301      	movs	r3, #1
 8004014:	4632      	mov	r2, r6
 8004016:	4649      	mov	r1, r9
 8004018:	4640      	mov	r0, r8
 800401a:	47d0      	blx	sl
 800401c:	3001      	adds	r0, #1
 800401e:	d09d      	beq.n	8003f5c <_printf_i+0x160>
 8004020:	3501      	adds	r5, #1
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	9903      	ldr	r1, [sp, #12]
 8004026:	1a5b      	subs	r3, r3, r1
 8004028:	42ab      	cmp	r3, r5
 800402a:	dcf2      	bgt.n	8004012 <_printf_i+0x216>
 800402c:	e7eb      	b.n	8004006 <_printf_i+0x20a>
 800402e:	2500      	movs	r5, #0
 8004030:	f104 0619 	add.w	r6, r4, #25
 8004034:	e7f5      	b.n	8004022 <_printf_i+0x226>
 8004036:	bf00      	nop
 8004038:	08004241 	.word	0x08004241
 800403c:	08004252 	.word	0x08004252

08004040 <__malloc_lock>:
 8004040:	4801      	ldr	r0, [pc, #4]	; (8004048 <__malloc_lock+0x8>)
 8004042:	f7ff bc73 	b.w	800392c <__retarget_lock_acquire_recursive>
 8004046:	bf00      	nop
 8004048:	2000072c 	.word	0x2000072c

0800404c <__malloc_unlock>:
 800404c:	4801      	ldr	r0, [pc, #4]	; (8004054 <__malloc_unlock+0x8>)
 800404e:	f7ff bc6e 	b.w	800392e <__retarget_lock_release_recursive>
 8004052:	bf00      	nop
 8004054:	2000072c 	.word	0x2000072c

08004058 <_realloc_r>:
 8004058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405c:	4680      	mov	r8, r0
 800405e:	4614      	mov	r4, r2
 8004060:	460e      	mov	r6, r1
 8004062:	b921      	cbnz	r1, 800406e <_realloc_r+0x16>
 8004064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004068:	4611      	mov	r1, r2
 800406a:	f7ff bdd9 	b.w	8003c20 <_malloc_r>
 800406e:	b92a      	cbnz	r2, 800407c <_realloc_r+0x24>
 8004070:	f000 f85a 	bl	8004128 <_free_r>
 8004074:	4625      	mov	r5, r4
 8004076:	4628      	mov	r0, r5
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	f000 f8a0 	bl	80041c0 <_malloc_usable_size_r>
 8004080:	4284      	cmp	r4, r0
 8004082:	4607      	mov	r7, r0
 8004084:	d802      	bhi.n	800408c <_realloc_r+0x34>
 8004086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800408a:	d812      	bhi.n	80040b2 <_realloc_r+0x5a>
 800408c:	4621      	mov	r1, r4
 800408e:	4640      	mov	r0, r8
 8004090:	f7ff fdc6 	bl	8003c20 <_malloc_r>
 8004094:	4605      	mov	r5, r0
 8004096:	2800      	cmp	r0, #0
 8004098:	d0ed      	beq.n	8004076 <_realloc_r+0x1e>
 800409a:	42bc      	cmp	r4, r7
 800409c:	4622      	mov	r2, r4
 800409e:	4631      	mov	r1, r6
 80040a0:	bf28      	it	cs
 80040a2:	463a      	movcs	r2, r7
 80040a4:	f000 f832 	bl	800410c <memcpy>
 80040a8:	4631      	mov	r1, r6
 80040aa:	4640      	mov	r0, r8
 80040ac:	f000 f83c 	bl	8004128 <_free_r>
 80040b0:	e7e1      	b.n	8004076 <_realloc_r+0x1e>
 80040b2:	4635      	mov	r5, r6
 80040b4:	e7df      	b.n	8004076 <_realloc_r+0x1e>

080040b6 <memmove>:
 80040b6:	4288      	cmp	r0, r1
 80040b8:	b510      	push	{r4, lr}
 80040ba:	eb01 0402 	add.w	r4, r1, r2
 80040be:	d902      	bls.n	80040c6 <memmove+0x10>
 80040c0:	4284      	cmp	r4, r0
 80040c2:	4623      	mov	r3, r4
 80040c4:	d807      	bhi.n	80040d6 <memmove+0x20>
 80040c6:	1e43      	subs	r3, r0, #1
 80040c8:	42a1      	cmp	r1, r4
 80040ca:	d008      	beq.n	80040de <memmove+0x28>
 80040cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040d4:	e7f8      	b.n	80040c8 <memmove+0x12>
 80040d6:	4402      	add	r2, r0
 80040d8:	4601      	mov	r1, r0
 80040da:	428a      	cmp	r2, r1
 80040dc:	d100      	bne.n	80040e0 <memmove+0x2a>
 80040de:	bd10      	pop	{r4, pc}
 80040e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040e8:	e7f7      	b.n	80040da <memmove+0x24>
	...

080040ec <_sbrk_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d06      	ldr	r5, [pc, #24]	; (8004108 <_sbrk_r+0x1c>)
 80040f0:	2300      	movs	r3, #0
 80040f2:	4604      	mov	r4, r0
 80040f4:	4608      	mov	r0, r1
 80040f6:	602b      	str	r3, [r5, #0]
 80040f8:	f7fc fe34 	bl	8000d64 <_sbrk>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_sbrk_r+0x1a>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	b103      	cbz	r3, 8004106 <_sbrk_r+0x1a>
 8004104:	6023      	str	r3, [r4, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000738 	.word	0x20000738

0800410c <memcpy>:
 800410c:	440a      	add	r2, r1
 800410e:	4291      	cmp	r1, r2
 8004110:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004114:	d100      	bne.n	8004118 <memcpy+0xc>
 8004116:	4770      	bx	lr
 8004118:	b510      	push	{r4, lr}
 800411a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800411e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004122:	4291      	cmp	r1, r2
 8004124:	d1f9      	bne.n	800411a <memcpy+0xe>
 8004126:	bd10      	pop	{r4, pc}

08004128 <_free_r>:
 8004128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800412a:	2900      	cmp	r1, #0
 800412c:	d044      	beq.n	80041b8 <_free_r+0x90>
 800412e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004132:	9001      	str	r0, [sp, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	f1a1 0404 	sub.w	r4, r1, #4
 800413a:	bfb8      	it	lt
 800413c:	18e4      	addlt	r4, r4, r3
 800413e:	f7ff ff7f 	bl	8004040 <__malloc_lock>
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <_free_r+0x94>)
 8004144:	9801      	ldr	r0, [sp, #4]
 8004146:	6813      	ldr	r3, [r2, #0]
 8004148:	b933      	cbnz	r3, 8004158 <_free_r+0x30>
 800414a:	6063      	str	r3, [r4, #4]
 800414c:	6014      	str	r4, [r2, #0]
 800414e:	b003      	add	sp, #12
 8004150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004154:	f7ff bf7a 	b.w	800404c <__malloc_unlock>
 8004158:	42a3      	cmp	r3, r4
 800415a:	d908      	bls.n	800416e <_free_r+0x46>
 800415c:	6825      	ldr	r5, [r4, #0]
 800415e:	1961      	adds	r1, r4, r5
 8004160:	428b      	cmp	r3, r1
 8004162:	bf01      	itttt	eq
 8004164:	6819      	ldreq	r1, [r3, #0]
 8004166:	685b      	ldreq	r3, [r3, #4]
 8004168:	1949      	addeq	r1, r1, r5
 800416a:	6021      	streq	r1, [r4, #0]
 800416c:	e7ed      	b.n	800414a <_free_r+0x22>
 800416e:	461a      	mov	r2, r3
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b10b      	cbz	r3, 8004178 <_free_r+0x50>
 8004174:	42a3      	cmp	r3, r4
 8004176:	d9fa      	bls.n	800416e <_free_r+0x46>
 8004178:	6811      	ldr	r1, [r2, #0]
 800417a:	1855      	adds	r5, r2, r1
 800417c:	42a5      	cmp	r5, r4
 800417e:	d10b      	bne.n	8004198 <_free_r+0x70>
 8004180:	6824      	ldr	r4, [r4, #0]
 8004182:	4421      	add	r1, r4
 8004184:	1854      	adds	r4, r2, r1
 8004186:	42a3      	cmp	r3, r4
 8004188:	6011      	str	r1, [r2, #0]
 800418a:	d1e0      	bne.n	800414e <_free_r+0x26>
 800418c:	681c      	ldr	r4, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	6053      	str	r3, [r2, #4]
 8004192:	440c      	add	r4, r1
 8004194:	6014      	str	r4, [r2, #0]
 8004196:	e7da      	b.n	800414e <_free_r+0x26>
 8004198:	d902      	bls.n	80041a0 <_free_r+0x78>
 800419a:	230c      	movs	r3, #12
 800419c:	6003      	str	r3, [r0, #0]
 800419e:	e7d6      	b.n	800414e <_free_r+0x26>
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	1961      	adds	r1, r4, r5
 80041a4:	428b      	cmp	r3, r1
 80041a6:	bf04      	itt	eq
 80041a8:	6819      	ldreq	r1, [r3, #0]
 80041aa:	685b      	ldreq	r3, [r3, #4]
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	bf04      	itt	eq
 80041b0:	1949      	addeq	r1, r1, r5
 80041b2:	6021      	streq	r1, [r4, #0]
 80041b4:	6054      	str	r4, [r2, #4]
 80041b6:	e7ca      	b.n	800414e <_free_r+0x26>
 80041b8:	b003      	add	sp, #12
 80041ba:	bd30      	pop	{r4, r5, pc}
 80041bc:	20000730 	.word	0x20000730

080041c0 <_malloc_usable_size_r>:
 80041c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c4:	1f18      	subs	r0, r3, #4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfbc      	itt	lt
 80041ca:	580b      	ldrlt	r3, [r1, r0]
 80041cc:	18c0      	addlt	r0, r0, r3
 80041ce:	4770      	bx	lr

080041d0 <_init>:
 80041d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d2:	bf00      	nop
 80041d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	469e      	mov	lr, r3
 80041da:	4770      	bx	lr

080041dc <_fini>:
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	bf00      	nop
 80041e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e2:	bc08      	pop	{r3}
 80041e4:	469e      	mov	lr, r3
 80041e6:	4770      	bx	lr
